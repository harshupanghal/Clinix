@page "/doctor-appointments"
@using Blazored.Toast.Services
@using Clinix.Application.DTOs
@using Clinix.Application.Interfaces.ServiceInterfaces
@using Clinix.Web.Components.Pages
@using Clinix.Web.Helpers
@inject IAppointmentService AppointmentService
@inject IToastService Toast

<h3>Doctor Schedule</h3>

@if (IsLoading) { <LoadingSpinner /> }
else
{
    <div>
        <label>Pick date</label>
        <InputDate @bind-Value="SelectedDate" />
        <button class="btn" @onclick="LoadSchedule">Load</button>
    </div>

    <div class="slots-container">
        <SlotPicker Slots="Slots" OnSlotSelected="OnSlotSelected" />
    </div>

    <div class="actions">
        <label>Delay upcoming by (minutes)</label>
        <InputNumber @bind-Value="DelayMinutes" />
        <button class="btn warning" @onclick="DelayAll">Delay</button>
    </div>
}

@code {
    bool IsLoading = true;
    DateTime SelectedDate = DateTime.UtcNow.Date;
    List<AppointmentSlotDto> Slots = new();
    int DelayMinutes = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadSchedule();
    }

    async Task LoadSchedule()
    {
        IsLoading = true;
        var res = await AppointmentService.GetAvailableSlotsAsync( /* doctorId */ 0, SelectedDate, SelectedDate.AddDays(1));
        if (res.Success) Slots = res.Data ?? new();
        else Toast.ShowError(res.Message ?? "Failed");
        IsLoading = false;
    }

    async Task OnSlotSelected(AppointmentSlotDto slot)
    {
        // navigate to appointment create or slot details
    }

    async Task DelayAll()
    {
        if (DelayMinutes <= 0) { Toast.ShowError("Enter minutes > 0"); return; }
        var dto = new DelayAppointmentsDto { DoctorId = /* doctorId */ 0, DelayDuration = TimeSpan.FromMinutes(DelayMinutes) };
        var res = await AppointmentService.DelayAppointmentsAsync(dto);
        if (res.Success)
        {
            Toast.ShowSuccess($"Delayed {res.Data?.Count ?? 0} appointments");
            await LoadSchedule();
        }
        else Toast.ShowError(res.Message ?? "Delay failed");
    }
}
