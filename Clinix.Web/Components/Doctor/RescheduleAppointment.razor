@page "/reschedule/{appointmentId:long}"
@using Blazored.Toast.Services
@using Clinix.Application.DTOs
@using Clinix.Application.Interfaces.ServiceInterfaces
@using Clinix.Web.Components.Pages
@using Clinix.Web.Helpers
@inject IAppointmentService AppointmentService
@inject IToastService Toast
@code {
    [Parameter] public long appointmentId { get; set; }
}

<h3>Reschedule</h3>

@if (IsLoading) { <LoadingSpinner/> }
else if (Appointment == null) { <div>Not found</div> }
else
{
    <div>
        <label>Pick new date</label>
        <InputDate @bind-Value="SelectedDate" />
        <button class="btn" @onclick="FetchSlots">Load Slots</button>
    </div>

    <div>
        @if (SlotsLoading) { <LoadingSpinner/> }
        else { <SlotPicker Slots="Slots" OnSlotSelected="OnSlotSelected" /> }
    </div>

    <div class="actions">
        <button class="btn" @onclick="Submit">Reschedule</button>
    </div>
}

@code {
    bool IsLoading = true;
    bool SlotsLoading = false;
    AppointmentDetailsDto? Appointment;
    DateTime SelectedDate = DateTime.UtcNow.Date;
    List<AppointmentSlotDto> Slots = new();
    AppointmentSlotDto? SelectedSlot;

    protected override async Task OnInitializedAsync()
    {
        var res = await AppointmentService.GetAppointmentDetailsAsync(appointmentId);
        if (!res.Success) { Toast.ShowError(res.Message ?? "Not found"); return; }
        Appointment = res.Data;
        IsLoading = false;
    }

    async Task FetchSlots()
    {
        SlotsLoading = true;
        var res = await AppointmentService.GetAvailableSlotsAsync(Appointment!.DoctorId, SelectedDate, SelectedDate.AddDays(1));
        if (res.Success) Slots = res.Data ?? new(); else Toast.ShowError(res.Message ?? "Failed");
        SlotsLoading = false;
    }

    // Fix for CS1998: Remove 'async' since there is no await
    void OnSlotSelected(AppointmentSlotDto slot) => SelectedSlot = slot;

    async Task Submit()
    {
        if (SelectedSlot == null) { Toast.ShowError("Pick a slot"); return; }
        var dto = new AppointmentUpdateDto { AppointmentId = appointmentId, NewStartTime = SelectedSlot.StartTime, NewEndTime = SelectedSlot.EndTime, Status = "Rescheduled" };
        var res = await AppointmentService.RescheduleAppointmentAsync(dto);
        if (res.Success) { Toast.ShowSuccess("Rescheduled"); /* navigate */ } else Toast.ShowError(res.Message ?? "Failed");
    }
}