@page "/provider/settings/{ProviderId:long}"
@page "/provider/settings"
@rendermode InteractiveServer
@using Clinix.Application.DTOs
@using Clinix.Application.Interfaces
@using Clinix.Web.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IProviderAppService ProviderService
@inject ICurrentUserService CurrentUser
@inject NavigationManager Navigation

<div class="provider-settings-page">
   
    <div class="page-header">
        <div>
            <h1 class="page-title">
                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"/>
                    <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0z"/>
                </svg>
                @(_isAdminView ? "Provider Working Hours" : "My Working Hours")
            </h1>
            <p class="page-subtitle">@(_isAdminView ? "Configure provider availability and schedule" : "Set your daily working hours and availability")</p>
        </div>
        @if (!_isAdminView)
        {
            <a href="/appointments/provider" class="btn btn-secondary">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z"/>
                    <path d="M6.5 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
                </svg>
                View Schedule
            </a>
        }
    </div>

    @if (!_authorized)
    {
        <div class="alert alert-danger">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/>
            </svg>
            <strong>Access Denied</strong> - @(_authError ?? "You are not authorized to view this page.")
        </div>
    }
    else if (Model is null)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-3 text-muted">Loading working hours...</p>
        </div>
    }
    else
    {
        <div class="card settings-card">
            <div class="card-header">
                <h5 class="card-header-title">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"/>
                        <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319z"/>
                    </svg>
                    Configure Working Hours
                </h5>
            </div>
            <div class="card-body">
                <div class="alert alert-info info-box">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                        <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                    </svg>
                    <div>
                        <strong>Important:</strong> Set your daily working hours. These times will be used to schedule appointments automatically.
                    </div>
                </div>

                <div class="time-inputs-grid">
                    <div class="form-group">
                        <label class="form-label">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M7.646 4.854a.5.5 0 0 0 .708 0l1.5-1.5a.5.5 0 0 0-.708-.708l-.646.647V1.5a.5.5 0 0 0-1 0v1.793l-.646-.647a.5.5 0 1 0-.708.708l1.5 1.5zm-5.303-.51a.5.5 0 0 0-.707 0L.146 5.834a.5.5 0 1 0 .708.707l1.5-1.5a.5.5 0 0 0 0-.708zm11.314 0a.5.5 0 0 1 .707 0l1.5 1.5a.5.5 0 0 1-.707.708l-1.5-1.5a.5.5 0 0 1 0-.708zM8 7a3.5 3.5 0 1 1 4.95 4.95l-2.05 2.05a.5.5 0 0 1-.707 0l-.707-.707 1.414-1.414-.707-.707-1.414 1.414-.707-.707 1.414-1.414-.707-.707-1.414 1.414A3.5 3.5 0 0 1 8 7zm-2.21.007a4.5 4.5 0 1 0 2.102 8.657L5.853 13.626a.5.5 0 0 1 .708-.708l2.039 2.039a4.5 4.5 0 0 0 .657-8.658z"/>
                            </svg>
                            Start Time
                        </label>
                        <InputDate Type="InputDateType.Time" @bind-Value="StartTime" class="form-control form-control-lg time-input" />
                        <small class="form-text">Your working day begins at this time</small>
                    </div>

                    <div class="form-group">
                        <label class="form-label">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M7.646 11.854a.5.5 0 0 0 .708 0l1.5-1.5a.5.5 0 0 0-.708-.708l-.646.647V8.5a.5.5 0 0 0-1 0v1.793l-.646-.647a.5.5 0 1 0-.708.708l1.5 1.5zm-5.303-.51a.5.5 0 0 0-.707 0L.146 12.834a.5.5 0 1 0 .708.707l1.5-1.5a.5.5 0 0 0 0-.708zm11.314 0a.5.5 0 0 1 .707 0l1.5 1.5a.5.5 0 0 1-.707.708l-1.5-1.5a.5.5 0 0 1 0-.708zM8 1a3.5 3.5 0 1 1 4.95 4.95l-2.05 2.05a.5.5 0 0 1-.707 0l-.707-.707 1.414-1.414-.707-.707-1.414 1.414-.707-.707 1.414-1.414-.707-.707-1.414 1.414A3.5 3.5 0 0 1 8 1zm-2.21.007a4.5 4.5 0 1 0 2.102 8.657L5.853 7.626a.5.5 0 0 1 .708-.708l2.039 2.039a4.5 4.5 0 0 0 .657-8.658z"/>
                            </svg>
                            End Time
                        </label>
                        <InputDate Type="InputDateType.Time" @bind-Value="EndTime" class="form-control form-control-lg time-input" />
                        <small class="form-text">Your working day ends at this time</small>
                    </div>
                </div>

                <div class="schedule-preview-card">
                    <h6 class="preview-title">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"/>
                            <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/>
                        </svg>
                        Current Schedule Preview
                    </h6>
                    <div class="preview-grid">
                        <div class="preview-item">
                            <svg class="preview-icon icon-start" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M7.646 4.854a.5.5 0 0 0 .708 0l1.5-1.5a.5.5 0 0 0-.708-.708l-.646.647V1.5a.5.5 0 0 0-1 0v1.793l-.646-.647a.5.5 0 1 0-.708.708l1.5 1.5zm-5.303-.51a.5.5 0 0 0-.707 0L.146 5.834a.5.5 0 1 0 .708.707l1.5-1.5a.5.5 0 0 0 0-.708zm11.314 0a.5.5 0 0 1 .707 0l1.5 1.5a.5.5 0 0 1-.707.708l-1.5-1.5a.5.5 0 0 1 0-.708z"/>
                                <path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0zm0 1a7 7 0 1 1 0 14A7 7 0 0 1 8 1z"/>
                            </svg>
                            <div class="preview-label">Start</div>
                            <div class="preview-value">@StartTime.ToString("hh:mm tt")</div>
                        </div>

                        <div class="preview-divider">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z"/>
                            </svg>
                        </div>

                        <div class="preview-item">
                            <svg class="preview-icon icon-end" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M7.646 11.854a.5.5 0 0 0 .708 0l1.5-1.5a.5.5 0 0 0-.708-.708l-.646.647V8.5a.5.5 0 0 0-1 0v1.793l-.646-.647a.5.5 0 1 0-.708.708l1.5 1.5zm-5.303-.51a.5.5 0 0 0-.707 0L.146 12.834a.5.5 0 1 0 .708.707l1.5-1.5a.5.5 0 0 0 0-.708zm11.314 0a.5.5 0 0 1 .707 0l1.5 1.5a.5.5 0 0 1-.707.708l-1.5-1.5a.5.5 0 0 1 0-.708z"/>
                                <path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0zm0 1a7 7 0 1 1 0 14A7 7 0 0 1 8 1z"/>
                            </svg>
                            <div class="preview-label">End</div>
                            <div class="preview-value">@EndTime.ToString("hh:mm tt")</div>
                        </div>

                        <div class="preview-divider">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"/>
                            </svg>
                        </div>

                        <div class="preview-item">
                            <svg class="preview-icon icon-duration" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                                <path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"/>
                            </svg>
                            <div class="preview-label">Duration</div>
                            <div class="preview-value">@((EndTime - StartTime).TotalHours.ToString("0.#")) hours</div>
                        </div>
                    </div>
                </div>

                <div class="action-buttons">
                    <button class="btn btn-primary" @onclick="SaveAsync" disabled="@_saving">
                        @if (_saving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Saving...</span>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425a.247.247 0 0 1 .02-.022Z"/>
                            </svg>
                            <span>Save Working Hours</span>
                        }
                    </button>
                    <button class="btn btn-secondary" @onclick="ResetAsync" disabled="@_saving">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                            <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
                        </svg>
                        Reset to Saved
                    </button>
                </div>
            </div>
        </div>

        @if (!string.IsNullOrWhiteSpace(Success))
        {
            <div class="alert alert-success">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
                </svg>
                @Success
            </div>
        }

        @if (!string.IsNullOrWhiteSpace(Error))
        {
            <div class="alert alert-danger">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/>
                </svg>
                @Error
            </div>
        }
    }
</div>

<style>
    .provider-settings-page {
        padding: var(--clx-spacing-lg);
        max-width: 900px;
        margin: 0 auto;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: var(--clx-spacing-xl);
        gap: var(--clx-spacing-md);
    }

    .page-title {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
        margin: 0 0 var(--clx-spacing-xs) 0;
        color: var(--clx-gray-900);
        font-size: 1.75rem;
    }

    .page-title svg {
        color: var(--clx-primary);
    }

    .page-subtitle {
        color: var(--clx-gray-600);
        font-size: 0.875rem;
        margin: 0;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--clx-spacing-2xl);
        text-align: center;
    }

    .settings-card {
        box-shadow: var(--clx-shadow-md);
    }

    .settings-card .card-header {
        background-color: var(--clx-gray-50);
        border-bottom: 2px solid var(--clx-gray-200);
        padding: var(--clx-spacing-lg);
    }

    .card-header-title {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
        margin: 0;
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--clx-gray-900);
    }

    .card-header-title svg {
        color: var(--clx-primary);
    }

    .info-box {
        display: flex;
        gap: var(--clx-spacing-md);
        align-items: flex-start;
        margin-bottom: var(--clx-spacing-lg);
    }

    .info-box svg {
        flex-shrink: 0;
        margin-top: 2px;
    }

    .time-inputs-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: var(--clx-spacing-lg);
        margin-bottom: var(--clx-spacing-xl);
    }

    .form-group {
        margin-bottom: 0;
    }

    .form-label {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-xs);
        font-weight: 500;
        font-size: 0.875rem;
        color: var(--clx-gray-700);
        margin-bottom: var(--clx-spacing-sm);
    }

    .form-label svg {
        color: var(--clx-primary);
    }

    .time-input {
        font-size: 1.125rem;
        font-weight: 500;
    }

    .form-text {
        display: block;
        margin-top: var(--clx-spacing-xs);
        font-size: 0.8125rem;
        color: var(--clx-gray-600);
    }

    .schedule-preview-card {
        background: linear-gradient(135deg, var(--clx-primary-light) 0%, var(--clx-white) 100%);
        border: 1px solid var(--clx-primary);
        border-radius: var(--clx-radius-lg);
        padding: var(--clx-spacing-lg);
        margin-bottom: var(--clx-spacing-xl);
    }

    .preview-title {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
        font-size: 1rem;
        font-weight: 600;
        color: var(--clx-gray-900);
        margin-bottom: var(--clx-spacing-lg);
    }

    .preview-title svg {
        color: var(--clx-primary);
    }

    .preview-grid {
        display: grid;
        grid-template-columns: 1fr auto 1fr auto 1fr;
        gap: var(--clx-spacing-md);
        align-items: center;
    }

    .preview-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: var(--clx-spacing-xs);
        text-align: center;
    }

    .preview-icon {
        margin-bottom: var(--clx-spacing-xs);
    }

    .icon-start {
        color: var(--clx-warning);
    }

    .icon-end {
        color: var(--clx-danger);
    }

    .icon-duration {
        color: var(--clx-primary);
    }

    .preview-label {
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        color: var(--clx-gray-600);
    }

    .preview-value {
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--clx-gray-900);
    }

    .preview-divider {
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--clx-gray-400);
    }

    .action-buttons {
        display: flex;
        gap: var(--clx-spacing-md);
    }

    .action-buttons .btn {
        flex: 1;
    }

    .btn:hover svg {
        color: currentColor;
    }

    .alert {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
    }

    .alert svg {
        flex-shrink: 0;
    }

    @@media (max-width: 768px) {
        .provider-settings-page {
            padding: var(--clx-spacing-md);
        }

        .page-header {
            flex-direction: column;
            align-items: stretch;
        }

        .page-header .btn {
            width: 100%;
        }

        .time-inputs-grid {
            grid-template-columns: 1fr;
        }

        .preview-grid {
            grid-template-columns: 1fr;
            gap: var(--clx-spacing-lg);
        }

        .preview-divider {
            transform: rotate(90deg);
        }

        .action-buttons {
            flex-direction: column;
        }
    }
</style>

@code {
    [Parameter] public long? ProviderId { get; set; }

    private ProviderDto? Model;
    private DateTime StartTime = DateTime.Today.AddHours(9);
    private DateTime EndTime = DateTime.Today.AddHours(17);
    private string? Success;
    private string? Error;
    private string? _authError;

    private bool _authorized;
    private bool _isAdminView;
    private bool _saving;
    private CurrentUserInfo _userInfo = new(false, "", "", "");
    private long _providerId;

    protected override async Task OnInitializedAsync()
    {
        _userInfo = await CurrentUser.GetCurrentUserAsync();
        
        if (!_userInfo.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        if (ProviderId.HasValue)
        {
            _isAdminView = true;
            
            if (_userInfo.Role != "Admin")
            {
                _authorized = false;
                _authError = "Only administrators can edit other providers' working hours.";
                return;
            }
            
            _providerId = ProviderId.Value;
            _authorized = true;
        }
        else
        {
            _isAdminView = false;
            
            if (_userInfo.Role != "Doctor")
            {
                _authorized = false;
                _authError = "Please log in as a doctor to manage your working hours.";
                return;
            }
            
            if (long.TryParse(_userInfo.ProviderId, out var providerId))
            {
                _providerId = providerId;
                _authorized = true;
            }
            else
            {
                _authorized = false;
                _authError = "Provider ID not found. Please contact support.";
                return;
            }
        }

        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            Model = await ProviderService.GetByIdAsync(_providerId);
            
            if (Model is not null)
            {
                StartTime = DateTime.Today.Add(Model.WorkStart.TimeOfDay);
                EndTime = DateTime.Today.Add(Model.WorkEnd.TimeOfDay);
            }
            else
            {
                Error = "Provider not found.";
            }
        }
        catch (Exception ex)
        {
            Error = $"Failed to load working hours: {ex.Message}";
        }
    }

    private async Task SaveAsync()
    {
        if (Model is null) return;

        if (EndTime <= StartTime)
        {
            Error = "End time must be after start time.";
            return;
        }

        if ((EndTime - StartTime).TotalHours > 16)
        {
            Error = "Working hours cannot exceed 16 hours per day.";
            return;
        }

        _saving = true;
        Error = null;
        Success = null;

        try
        {
            var request = new UpdateProviderWorkingHoursRequest(_providerId, StartTime, EndTime);
            var success = await ProviderService.UpdateWorkingHoursAsync(request);
            
            if (success)
            {
                Success = "Working hours saved successfully.";
                await LoadAsync();
            }
            else
            {
                Error = "Failed to save working hours. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Error = $"Error saving working hours: {ex.Message}";
        }
        finally
        {
            _saving = false;
        }
    }

    private async Task ResetAsync()
    {
        if (Model is not null)
        {
            StartTime = DateTime.Today.Add(Model.WorkStart.TimeOfDay);
            EndTime = DateTime.Today.Add(Model.WorkEnd.TimeOfDay);
            Success = null;
            Error = null;
        }
        await Task.CompletedTask;
    }
}
