@page "/appointments/provider/{ProviderId:long}"
@page "/appointments/provider"
@rendermode InteractiveServer
@using Clinix.Application.DTOs
@using Clinix.Application.Interfaces
@using Clinix.Domain.Enums
@using Clinix.Web.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IAppointmentAppService AppointmentService
@inject IDoctorActionsAppService DoctorActions
@inject ICurrentUserService CurrentUser
@inject NavigationManager Navigation

<div class="provider-schedule-page">
    <!-- Page Header -->
    <div class="page-header">
        <div>
            <h1 class="page-title">
                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M14 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM1 3.857C1 3.384 1.448 3 2 3h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H2c-.552 0-1-.384-1-.857V3.857z"/>
                    <path d="M6.5 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-9 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm3 0a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
                </svg>
                @(_isAdminView ? "Doctor Schedule" : "My Schedule")
            </h1>
            <p class="page-subtitle">@(_isAdminView ? "View and manage doctor appointments" : "Manage your appointments and availability")</p>
        </div>
        @if (!_isAdminView)
        {
            <a href="/provider/settings" class="btn btn-secondary">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"/>
                    <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319z"/>
                </svg>
                Working Hours
            </a>
        }
    </div>

    @if (!_authorized)
    {
        <div class="alert alert-danger">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/>
            </svg>
            <strong>Access Denied</strong> - @(_authError ?? "You are not authorized to view this page.")
        </div>
    }
    else
    {
        <!-- Date Range Filter Card -->
        <div class="card filter-card">
            <div class="card-body">
                <EditForm Model="@this" OnValidSubmit="@LoadAsync">
                    <div class="filter-grid">
                        <div class="form-group">
                            <label class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5z"/>
                                </svg>
                                From Date
                            </label>
                            <InputDate @bind-Value="FromDate" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5z"/>
                                </svg>
                                To Date
                            </label>
                            <InputDate @bind-Value="ToDate" class="form-control" />
                        </div>
                        <div class="quick-actions">
                            <button class="btn btn-primary" type="submit">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
                                </svg>
                                Load
                            </button>
                            <button class="btn btn-secondary" type="button" @onclick="TodayAsync">Today</button>
                            <button class="btn btn-secondary" type="button" @onclick="TomorrowAsync">Tomorrow</button>
                            <button class="btn btn-secondary" type="button" @onclick="Next7Async">Next 7 Days</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>

        @if (Items is null)
        {
            <div class="loading-container">
                <div class="spinner-border text-primary" role="status"></div>
                <p class="mt-3 text-muted">Loading appointments...</p>
            </div>
        }
        else if (Items.Count == 0)
        {
            <div class="card empty-state-card">
                <div class="card-body">
                    <svg class="empty-icon" xmlns="http://www.w3.org/2000/svg" width="80" height="80" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-5 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"/>
                        <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
                    </svg>
                    <h5 class="empty-title">No appointments in this date range</h5>
                    <p class="empty-subtitle">Try selecting a different date range or check your schedule settings.</p>
                </div>
            </div>
        }
        else
        {
            <div class="card">
                <div class="table-responsive">
                    <table class="table schedule-table">
                        <thead>
                            <tr>
                                <th>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                        <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5z"/>
                                    </svg>
                                    Date & Time
                                </th>
                                <th>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                        <path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"/>
                                        <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0z"/>
                                    </svg>
                                    Duration
                                </th>
                                <th>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                        <path d="M1 2.5A1.5 1.5 0 0 1 2.5 1h3A1.5 1.5 0 0 1 7 2.5v3A1.5 1.5 0 0 1 5.5 7h-3A1.5 1.5 0 0 1 1 5.5v-3zm8 0A1.5 1.5 0 0 1 10.5 1h3A1.5 1.5 0 0 1 15 2.5v3A1.5 1.5 0 0 1 13.5 7h-3A1.5 1.5 0 0 1 9 5.5v-3z"/>
                                    </svg>
                                    Type
                                </th>
                                <th>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                        <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z"/>
                                    </svg>
                                    Patient
                                </th>
                                <th>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                        <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/>
                                    </svg>
                                    Status
                                </th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var a in Items)
                        {
                            var apptId = a.Id;
                            <tr>
                                <td>
                                    <div class="datetime-cell">
                                        <div class="date-value">@a.Start.LocalDateTime.ToString("MMM dd, yyyy")</div>
                                        <div class="time-value">@a.Start.LocalDateTime.ToString("hh:mm tt") - @a.End.LocalDateTime.ToString("hh:mm tt")</div>
                                    </div>
                                </td>
                                <td>
                                    <span class="duration-badge">@((int)(a.End - a.Start).TotalMinutes) min</span>
                                </td>
                                <td>
                                    <span class="type-badge">@a.Type</span>
                                </td>
                                <td>
                                    <span class="patient-id">Patient #@a.PatientId</span>
                                </td>
                                <td>
                                    <span class="badge badge-@GetStatusColor(a.Status)">@a.Status</span>
                                </td>
                                <td>
                                    <div class="action-buttons-provider">
                                        @if (a.Status == AppointmentStatus.Pending)
                                        {
                                            <button class="btn btn-sm btn-success" @onclick="@(async () => await ApproveAsync(apptId))" title="Approve">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                                    <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z"/>
                                                </svg>
                                            </button>
                                            <button class="btn btn-sm btn-danger" @onclick="@(async () => await RejectAsync(apptId))" title="Reject">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                                                </svg>
                                            </button>
                                        }
                                        @if (a.Status == AppointmentStatus.Pending || a.Status == AppointmentStatus.Scheduled)
                                        {
                                            <button class="btn btn-sm btn-warning" @onclick="@(() => OpenDelay(apptId))" title="Delay">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                                    <path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"/>
                                                    <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0z"/>
                                                </svg>
                                            </button>
                                        }
                                        <a class="btn btn-sm btn-primary" href="/appointments/@a.Id" title="View Details">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                                <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"/>
                                                <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/>
                                            </svg>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="summary-text">
                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                </svg>
                Showing @Items.Count appointment(s) from @FromDate.ToString("MMM dd, yyyy") to @ToDate.ToString("MMM dd, yyyy")
            </div>
        }

        <!-- Delay Modal -->
        @if (DelayOpen)
        {
            <div class="modal-overlay" @onclick="CloseDelay">
                <div class="modal-dialog" @onclick:stopPropagation="true">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8.515 1.019A7 7 0 0 0 8 1V0a8 8 0 0 1 .589.022l-.074.997zm2.004.45a7.003 7.003 0 0 0-.985-.299l.219-.976c.383.086.76.2 1.126.342l-.36.933zm1.37.71a7.01 7.01 0 0 0-.439-.27l.493-.87a8.025 8.025 0 0 1 .979.654l-.615.789a6.996 6.996 0 0 0-.418-.302zm1.834 1.79a6.99 6.99 0 0 0-.653-.796l.724-.69c.27.285.52.59.747.91l-.818.576zm.744 1.352a7.08 7.08 0 0 0-.214-.468l.893-.45a7.976 7.976 0 0 1 .45 1.088l-.95.313a7.023 7.023 0 0 0-.179-.483zm.53 2.507a6.991 6.991 0 0 0-.1-1.025l.985-.17c.067.386.106.778.116 1.17l-1 .025zm-.131 1.538c.033-.17.06-.339.081-.51l.993.123a7.957 7.957 0 0 1-.23 1.155l-.964-.267c.046-.165.086-.332.12-.501zm-.952 2.379c.184-.29.346-.594.486-.908l.914.405c-.16.36-.345.706-.555 1.038l-.845-.535zm-.964 1.205c.122-.122.239-.248.35-.378l.758.653a8.073 8.073 0 0 1-.401.432l-.707-.707z"/>
                                    <path d="M8 1a7 7 0 1 0 4.95 11.95l.707.707A8.001 8.001 0 1 1 8 0v1z"/>
                                    <path d="M7.5 3a.5.5 0 0 1 .5.5v5.21l3.248 1.856a.5.5 0 0 1-.496.868l-3.5-2A.5.5 0 0 1 7 9V3.5a.5.5 0 0 1 .5-.5z"/>
                                </svg>
                                Delay Appointment
                            </h5>
                            <button class="modal-close-btn" @onclick="CloseDelay">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                                </svg>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label class="form-label">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                        <path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"/>
                                        <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0z"/>
                                    </svg>
                                    Delay Duration
                                </label>
                                <select class="form-select" @bind="DelayMinutes">
                                    <option value="15">15 minutes</option>
                                    <option value="30">30 minutes</option>
                                    <option value="45">45 minutes</option>
                                    <option value="60">1 hour</option>
                                    <option value="90">1 hour 30 minutes</option>
                                    <option value="120">2 hours</option>
                                </select>
                            </div>
                            <div class="alert alert-info">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                                </svg>
                                Subsequent appointments will shift forward automatically. Overflow appointments will move to the next working day.
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary" @onclick="CloseDelay">Cancel</button>
                            <button class="btn btn-primary" @onclick="ApplyDelayAsync">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425a.247.247 0 0 1 .02-.022Z"/>
                                </svg>
                                Apply Delay
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (!string.IsNullOrWhiteSpace(Error))
        {
            <div class="alert alert-danger">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/>
                </svg>
                @Error
            </div>
        }

        @if (!string.IsNullOrWhiteSpace(Success))
        {
            <div class="alert alert-success">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
                </svg>
                @Success
            </div>
        }
    }
</div>

<style>
    /* ============================================
       PROVIDER SCHEDULE PAGE
       ============================================ */
    .provider-schedule-page {
        padding: var(--clx-spacing-lg);
        max-width: 1400px;
        margin: 0 auto;
    }

    /* ============================================
       PAGE HEADER
       ============================================ */
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: var(--clx-spacing-xl);
        gap: var(--clx-spacing-md);
    }

    .page-title {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
        margin: 0 0 var(--clx-spacing-xs) 0;
        color: var(--clx-gray-900);
        font-size: 1.75rem;
    }

    .page-title svg {
        color: var(--clx-primary);
    }

    .page-subtitle {
        color: var(--clx-gray-600);
        font-size: 0.875rem;
        margin: 0;
    }

    /* ============================================
       FILTER CARD
       ============================================ */
    .filter-card {
        margin-bottom: var(--clx-spacing-lg);
        box-shadow: var(--clx-shadow-md);
    }

    .filter-grid {
        display: grid;
        grid-template-columns: 1fr 1fr auto;
        gap: var(--clx-spacing-md);
        align-items: end;
    }

    .quick-actions {
        display: flex;
        gap: var(--clx-spacing-sm);
        flex-wrap: wrap;
    }

    .form-group {
        margin-bottom: 0;
    }

    .form-label {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-xs);
        font-weight: 500;
        font-size: 0.875rem;
        color: var(--clx-gray-700);
        margin-bottom: var(--clx-spacing-sm);
    }

    .form-label svg {
        color: var(--clx-primary);
    }

    /* ============================================
       LOADING & EMPTY STATES
       ============================================ */
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--clx-spacing-2xl);
        text-align: center;
    }

    .empty-state-card {
        text-align: center;
        box-shadow: var(--clx-shadow-md);
    }

    .empty-state-card .card-body {
        padding: var(--clx-spacing-2xl);
    }

    .empty-icon {
        color: var(--clx-gray-400);
        margin-bottom: var(--clx-spacing-lg);
    }

    .empty-title {
        color: var(--clx-gray-900);
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: var(--clx-spacing-sm);
    }

    .empty-subtitle {
        color: var(--clx-gray-600);
        font-size: 0.875rem;
        margin-bottom: 0;
    }

    /* ============================================
       SCHEDULE TABLE
       ============================================ */
    .schedule-table {
        font-size: 0.875rem;
        margin: 0;
    }

    .schedule-table thead {
        background-color: var(--clx-gray-100);
    }

    .schedule-table th {
        font-weight: 600;
        color: var(--clx-gray-700);
        font-size: 0.8125rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        padding: var(--clx-spacing-md);
        border-bottom: 2px solid var(--clx-gray-300);
        white-space: nowrap;
    }

    .schedule-table th svg {
        color: var(--clx-primary);
        margin-right: var(--clx-spacing-xs);
        vertical-align: text-bottom;
    }

    .schedule-table td {
        padding: var(--clx-spacing-md);
        vertical-align: middle;
    }

    .schedule-table tbody tr {
        transition: background-color var(--clx-transition-fast);
    }

    .schedule-table tbody tr:hover {
        background-color: var(--clx-gray-50);
    }

    /* ============================================
       TABLE CELLS
       ============================================ */
    .datetime-cell {
        display: flex;
        flex-direction: column;
        gap: var(--clx-spacing-xs);
    }

    .date-value {
        font-weight: 500;
        color: var(--clx-gray-900);
    }

    .time-value {
        font-size: 0.8125rem;
        color: var(--clx-gray-600);
    }

    .duration-badge {
        display: inline-flex;
        padding: var(--clx-spacing-xs) var(--clx-spacing-sm);
        background-color: var(--clx-gray-100);
        border-radius: var(--clx-radius-sm);
        font-size: 0.8125rem;
        color: var(--clx-gray-700);
        font-weight: 500;
    }

    .type-badge {
        display: inline-flex;
        padding: var(--clx-spacing-xs) var(--clx-spacing-sm);
        background-color: var(--clx-gray-100);
        border: 1px solid var(--clx-gray-300);
        border-radius: var(--clx-radius-sm);
        font-size: 0.8125rem;
        color: var(--clx-gray-900);
        font-weight: 500;
    }

    .patient-id {
        font-size: 0.8125rem;
        color: var(--clx-gray-600);
    }

    /* ============================================
       PROVIDER ACTION BUTTONS
       ============================================ */
    .action-buttons-provider {
        display: flex;
        gap: var(--clx-spacing-xs);
        flex-wrap: wrap;
    }

    .btn:hover svg {
        color: currentColor;
    }

    /* ============================================
       SUMMARY TEXT
       ============================================ */
    .summary-text {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-xs);
        margin-top: var(--clx-spacing-md);
        font-size: 0.875rem;
        color: var(--clx-gray-600);
    }

    .summary-text svg {
        color: var(--clx-primary);
    }

    /* ============================================
       MODAL
       ============================================ */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1050;
        backdrop-filter: blur(2px);
    }

    .modal-dialog {
        max-width: 500px;
        width: 100%;
        margin: var(--clx-spacing-md);
    }

    .modal-content {
        background-color: var(--clx-white);
        border-radius: var(--clx-radius-lg);
        box-shadow: var(--clx-shadow-xl);
        overflow: hidden;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--clx-spacing-lg);
        border-bottom: 1px solid var(--clx-gray-200);
        background-color: var(--clx-gray-50);
    }

    .modal-title {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
        margin: 0;
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--clx-gray-900);
    }

    .modal-title svg {
        color: var(--clx-warning);
    }

    .modal-close-btn {
        background: none;
        border: none;
        color: var(--clx-gray-600);
        cursor: pointer;
        padding: var(--clx-spacing-xs);
        border-radius: var(--clx-radius-sm);
        transition: all var(--clx-transition-fast);
    }

    .modal-close-btn:hover {
        background-color: var(--clx-gray-200);
        color: var(--clx-gray-900);
    }

    .modal-body {
        padding: var(--clx-spacing-lg);
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: var(--clx-spacing-sm);
        padding: var(--clx-spacing-lg);
        border-top: 1px solid var(--clx-gray-200);
        background-color: var(--clx-gray-50);
    }

    /* ============================================
       BADGES
       ============================================ */
    .badge-warning { background-color: var(--clx-warning); color: #856404; }
    .badge-info { background-color: var(--clx-info); color: var(--clx-white); }
    .badge-primary { background-color: var(--clx-primary); color: var(--clx-white); }
    .badge-success { background-color: var(--clx-success); color: var(--clx-white); }
    .badge-danger { background-color: var(--clx-danger); color: var(--clx-white); }
    .badge-secondary { background-color: var(--clx-gray-600); color: var(--clx-white); }
    .badge-dark { background-color: var(--clx-gray-800); color: var(--clx-white); }

    /* ============================================
       ALERTS
       ============================================ */
    .alert {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
    }

    .alert svg {
        flex-shrink: 0;
    }

    /* ============================================
       RESPONSIVE DESIGN
       ============================================ */
    @@media (max-width: 768px) {
        .provider-schedule-page {
            padding: var(--clx-spacing-md);
        }

        .page-header {
            flex-direction: column;
            align-items: stretch;
        }

        .page-header .btn {
            width: 100%;
        }

        .filter-grid {
            grid-template-columns: 1fr;
        }

        .quick-actions {
            width: 100%;
        }

        .quick-actions .btn {
            flex: 1;
        }

        .schedule-table {
            font-size: 0.75rem;
        }

        .schedule-table th,
        .schedule-table td {
            padding: var(--clx-spacing-xs);
        }

        .schedule-table th svg {
            display: none;
        }

        .action-buttons-provider {
            justify-content: flex-start;
        }

        .modal-dialog {
            margin: var(--clx-spacing-sm);
        }
    }

    @@media (max-width: 1024px) {
        .filter-grid {
            grid-template-columns: 1fr 1fr;
        }

        .quick-actions {
            grid-column: 1 / -1;
        }
    }
</style>

@code {
    [Parameter] public long? ProviderId { get; set; }

    public DateTime FromDate { get; set; } = DateTime.Now.Date;
    public DateTime ToDate { get; set; } = DateTime.Now.Date.AddDays(1);

    private List<AppointmentSummaryDto>? Items;
    private string? Error;
    private string? Success;
    private string? _authError;

    private bool DelayOpen;
    private long DelayFor;
    private int DelayMinutes = 30;

    private bool _authorized;
    private bool _isAdminView;
    private CurrentUserInfo _userInfo = new(false, "", "", "");
    private long _providerId;

    protected override async Task OnInitializedAsync()
    {
        _userInfo = await CurrentUser.GetCurrentUserAsync();
        
        if (!_userInfo.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        if (ProviderId.HasValue)
        {
            _isAdminView = true;
            
            if (_userInfo.Role != "Admin")
            {
                _authorized = false;
                _authError = "Only administrators can view other providers' schedules.";
                return;
            }
            
            _providerId = ProviderId.Value;
            _authorized = true;
        }
        else
        {
            _isAdminView = false;
            
            if (_userInfo.Role != "Doctor")
            {
                _authorized = false;
                _authError = "Please log in as a doctor to view your schedule.";
                return;
            }
            
            if (long.TryParse(_userInfo.ProviderId, out var providerId))
            {
                _providerId = providerId;
                _authorized = true;
            }
            else
            {
                _authorized = false;
                _authError = "Provider ID not found. Please contact support.";
                return;
            }
        }

        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            var fromDto = new DateTimeOffset(FromDate, DateTimeOffset.Now.Offset);
            var toDto = new DateTimeOffset(ToDate, DateTimeOffset.Now.Offset);
            Items = await AppointmentService.GetByProviderAsync(_providerId, fromDto, toDto);
            Error = null;
        }
        catch (Exception ex)
        {
            Error = $"Failed to load appointments: {ex.Message}";
            Items = new List<AppointmentSummaryDto>();
        }
    }

    private async Task TodayAsync() 
    { 
        FromDate = DateTime.Now.Date; 
        ToDate = FromDate.AddDays(1);
        await LoadAsync();
    }

    private async Task TomorrowAsync() 
    { 
        FromDate = DateTime.Now.Date.AddDays(1); 
        ToDate = FromDate.AddDays(1);
        await LoadAsync();
    }

    private async Task Next7Async() 
    { 
        FromDate = DateTime.Now.Date; 
        ToDate = FromDate.AddDays(7);
        await LoadAsync();
    }

    private async Task ApproveAsync(long id)
    {
        try 
        { 
            await DoctorActions.ApproveAsync(id); 
            Success = "Appointment approved successfully.";
            await LoadAsync();
            StateHasChanged();
            await Task.Delay(3000);
            Success = null;
        } 
        catch (Exception ex) { Error = ex.Message; }
    }

    private async Task RejectAsync(long id)
    {
        try 
        { 
            await DoctorActions.RejectAsync(id, "Rejected by doctor"); 
            Success = "Appointment rejected.";
            await LoadAsync();
            StateHasChanged();
            await Task.Delay(3000);
            Success = null;
        } 
        catch (Exception ex) { Error = ex.Message; }
    }

    private void OpenDelay(long id) 
    { 
        DelayFor = id; 
        DelayOpen = true; 
    }

    private void CloseDelay() 
    { 
        DelayOpen = false; 
    }

    private async Task ApplyDelayAsync()
    {
        try
        {
            await DoctorActions.DelayCascadeAsync(DelayFor, TimeSpan.FromMinutes(DelayMinutes));
            DelayOpen = false;
            Success = $"Appointment delayed by {DelayMinutes} minutes. Subsequent appointments adjusted.";
            await LoadAsync();
            StateHasChanged();
            await Task.Delay(3000);
            Success = null;
        }
        catch (Exception ex) 
        { 
            DelayOpen = false;
            Error = ex.Message; 
        }
    }

    private string GetStatusColor(AppointmentStatus status) => status switch
    {
        AppointmentStatus.Pending => "warning",
        AppointmentStatus.Confirmed => "info",
        AppointmentStatus.Scheduled => "primary",
        AppointmentStatus.Completed => "success",
        AppointmentStatus.Cancelled => "danger",
        AppointmentStatus.Rescheduled => "secondary",
        AppointmentStatus.NoShow => "dark",
        AppointmentStatus.Rejected => "danger",
        _ => "secondary"
    };
}
