@page "/appointments/{Id:long}"
@* @page "/appointments" *@
@using Clinix.Application.DTOs
@using Clinix.Application.Interfaces
@using Clinix.Domain.Enums
@using Clinix.Web.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IAppointmentAppService AppointmentService
@inject IFollowUpAppService FollowUpService
@inject ICurrentUserService CurrentUser
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="appointment-details-page">
    <!-- Page Header -->
    <div class="page-header">
        <div>
            <h1 class="page-title">
                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-5 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"/>
                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
                </svg>
                Appointment Details
            </h1>
            <p class="page-subtitle">View and manage appointment information</p>
        </div>
        @if (_userInfo.Role == "Patient"){

        <button class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/appointments/patient"))">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>
            </svg>
            Back to Appointments
        </button>
        }

        @if (_userInfo.Role == "Doctor"){

        <button class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/appointments/provider"))">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>
            </svg>
            Back to Appointments
        </button>
        }
    </div>

    @if (!_authorized)
    {
        <div class="alert alert-danger">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/>
            </svg>
            <strong>Access Denied</strong> - You are not authorized to view this appointment.
        </div>
    }
    else if (Item is null)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-3 text-muted">Loading appointment details...</p>
        </div>
    }
    else
    {
        <!-- Appointment Info Card -->
        <div class="card info-card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z"/>
                        </svg>
                        Appointment #@Item.Id
                    </h5>
                    <span class="badge badge-@GetStatusColor(Item.Status) status-badge">@Item.Status</span>
                </div>
            </div>
            <div class="card-body">
                <div class="info-grid">
                    <div class="info-item">
                        <span class="info-label">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z"/>
                            </svg>
                            Patient ID
                        </span>
                        <span class="info-value">@Item.PatientId</span>
                    </div>

                    <div class="info-item">
                        <span class="info-label">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                            </svg>
                            Provider ID
                        </span>
                        <span class="info-value">@Item.ProviderId</span>
                    </div>

                    <div class="info-item">
                        <span class="info-label">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"/>
                                <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0z"/>
                            </svg>
                            Start Time
                        </span>
                        <span class="info-value">@Item.Start.LocalDateTime.ToString("MMM dd, yyyy hh:mm tt")</span>
                    </div>

                    <div class="info-item">
                        <span class="info-label">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"/>
                                <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0z"/>
                            </svg>
                            End Time
                        </span>
                        <span class="info-value">@Item.End.LocalDateTime.ToString("MMM dd, yyyy hh:mm tt")</span>
                    </div>

                    <div class="info-item">
                        <span class="info-label">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M1 2.5A1.5 1.5 0 0 1 2.5 1h3A1.5 1.5 0 0 1 7 2.5v3A1.5 1.5 0 0 1 5.5 7h-3A1.5 1.5 0 0 1 1 5.5v-3zm8 0A1.5 1.5 0 0 1 10.5 1h3A1.5 1.5 0 0 1 15 2.5v3A1.5 1.5 0 0 1 13.5 7h-3A1.5 1.5 0 0 1 9 5.5v-3z"/>
                            </svg>
                            Type
                        </span>
                        <span class="info-value">@Item.Type</span>
                    </div>

                    <div class="info-item info-item-full">
                        <span class="info-label">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
                                <path d="M3 4.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 8a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 8zm0 3.5a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"/>
                            </svg>
                            Notes
                        </span>
                        <pre class="notes-content">@(Item.Notes ?? "No notes provided")</pre>
                    </div>
                </div>
            </div>

            @if (_canModify)
            {
                <div class="card-footer">
                    <div class="action-buttons">
                        @if (_userInfo.Role == "Patient" && (Item.Status == AppointmentStatus.Pending || Item.Status == AppointmentStatus.Scheduled))
                        {
                            <button class="btn btn-primary" @onclick="ToggleReschedule">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"/>
                                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
                                </svg>
                                Reschedule
                            </button>
                            <button class="btn btn-danger" @onclick="ToggleCancel">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                                </svg>
                                Cancel Appointment
                            </button>
                        }
                        
                        @if (_userInfo.Role == "Doctor")
                        {
                            @if (Item.Status == AppointmentStatus.Pending || Item.Status == AppointmentStatus.Scheduled)
                            {
                                <button class="btn btn-primary" @onclick="ToggleReschedule">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                        <path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"/>
                                        <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5z"/>
                                    </svg>
                                    Reschedule
                                </button>
                            }
                            @if (Item.Status == AppointmentStatus.Confirmed || Item.Status == AppointmentStatus.Scheduled)
                            {
                                <button class="btn btn-success" @onclick="CompleteAsync">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                        <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425a.247.247 0 0 1 .02-.022Z"/>
                                    </svg>
                                    Mark Complete
                                </button>
                            }
                            <button class="btn btn-danger" @onclick="ToggleCancel">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                                </svg>
                                Cancel Appointment
                            </button>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Reschedule Card -->
        @if (showReschedule)
        {
            <div class="card action-card">
                <div class="card-header card-header-primary">
                    <h5 class="mb-0">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z"/>
                            <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
                        </svg>
                        Reschedule Appointment
                    </h5>
                </div>
                <div class="card-body">
                    <div class="form-grid-2col">
                        <div class="form-group">
                            <label class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"/>
                                    <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0z"/>
                                </svg>
                                New Start Time
                            </label>
                            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="RescheduleForm.Start" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z"/>
                                    <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0z"/>
                                </svg>
                                New End Time
                            </label>
                            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="RescheduleForm.End" class="form-control" />
                        </div>
                    </div>
                    <div class="action-buttons mt-3">
                        <button class="btn btn-primary" @onclick="DoRescheduleAsync">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425a.247.247 0 0 1 .02-.022Z"/>
                            </svg>
                            Save Changes
                        </button>
                        <button class="btn btn-secondary" @onclick="ToggleReschedule">Cancel</button>
                    </div>
                </div>
            </div>
        }

        <!-- Cancel Card -->
        @if (showCancel)
        {
            <div class="card action-card">
                <div class="card-header card-header-danger">
                    <h5 class="mb-0">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                        </svg>
                        Cancel Appointment
                    </h5>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label class="form-label">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
                                <path d="M3 4.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 8a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 8zm0 3.5a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"/>
                            </svg>
                            Cancellation Reason
                        </label>
                        <input type="text" class="form-control" @bind="CancelForm.Reason" placeholder="Please provide a reason for cancellation" />
                    </div>
                    <div class="action-buttons mt-3">
                        <button class="btn btn-danger" @onclick="DoCancelAsync">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425a.247.247 0 0 1 .02-.022Z"/>
                            </svg>
                            Confirm Cancellation
                        </button>
                        <button class="btn btn-secondary" @onclick="ToggleCancel">Back</button>
                    </div>
                </div>
            </div>
        }

        <!-- Follow-ups Card (Doctor Only) -->
        @if (_userInfo.Role == "Doctor" && Item.Status == AppointmentStatus.Completed)
        {
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41zm-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9z"/>
                            <path fill-rule="evenodd" d="M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5.002 5.002 0 0 0 8 3zM3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9H3.1z"/>
                        </svg>
                        Follow-up Management
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Add Follow-up Form -->
                    <div class="form-grid-2col mb-4">
                        <div class="form-group">
                            <label class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
                                </svg>
                                Due Date
                            </label>
                            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="FollowUpForm.Due" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
                                    <path d="M3 4.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 8a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 8zm0 3.5a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5z"/>
                                </svg>
                                Reason
                            </label>
                            <input type="text" class="form-control" @bind="FollowUpForm.Reason" placeholder="Follow-up reason" />
                        </div>
                    </div>
                    <button class="btn btn-primary mb-4" @onclick="CreateFollowUpAsync">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                        </svg>
                        Add Follow-up
                    </button>

                    @if (Fus is null)
                    {
                        <div class="loading-container-sm">
                            <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                            <span class="ms-2 text-muted">Loading follow-ups...</span>
                        </div>
                    }
                    else if (Fus.Count == 0)
                    {
                        <div class="alert alert-info">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                            </svg>
                            No follow-ups scheduled yet.
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table followup-table">
                                <thead>
                                    <tr>
                                        <th>Due Date</th>
                                        <th>Status</th>
                                        <th>Reason</th>
                                        <th>Notes</th>
                                        <th class="text-end">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                @foreach (var f in Fus)
                                {
                                    var fId = f.Id;
                                    <tr>
                                        <td>@f.DueBy.LocalDateTime.ToString("MMM dd, yyyy hh:mm tt")</td>
                                        <td><span class="badge badge-@GetFollowUpStatusColor(f.Status)">@f.Status</span></td>
                                        <td>@f.Reason</td>
                                        <td>@(f.Notes ?? "-")</td>
                                        <td>
                                            <div class="action-buttons-sm">
                                                @if (f.Status == FollowUpStatus.Pending)
                                                {
                                                    <button class="btn btn-sm btn-success" @onclick="@(async () => await CompleteFollowUpAsync(fId))">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                                            <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425a.247.247 0 0 1 .02-.022Z"/>
                                                        </svg>
                                                        Complete
                                                    </button>
                                                    <button class="btn btn-sm btn-danger" @onclick="@(async () => await CancelFollowUpAsync(fId))">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                                                        </svg>
                                                        Cancel
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        }

        @if (!string.IsNullOrWhiteSpace(Error))
        {
            <div class="alert alert-danger">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/>
                </svg>
                @Error
            </div>
        }
    }
</div>

<style>
    /* ============================================
       APPOINTMENT DETAILS PAGE
       ============================================ */
    .appointment-details-page {
        padding: var(--clx-spacing-lg);
        max-width: 1200px;
        margin: 0 auto;
    }

    /* ============================================
       PAGE HEADER
       ============================================ */
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: var(--clx-spacing-xl);
        gap: var(--clx-spacing-md);
    }

    .page-title {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
        margin: 0 0 var(--clx-spacing-xs) 0;
        color: var(--clx-gray-900);
        font-size: 1.75rem;
    }

    .page-title svg {
        color: var(--clx-primary);
    }

    .page-subtitle {
        color: var(--clx-gray-600);
        font-size: 0.875rem;
        margin: 0;
    }

    /* ============================================
       LOADING STATE
       ============================================ */
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--clx-spacing-2xl);
        text-align: center;
    }

    .loading-container-sm {
        display: flex;
        align-items: center;
        padding: var(--clx-spacing-md);
    }

    /* ============================================
       INFO CARD
       ============================================ */
    .info-card {
        margin-bottom: var(--clx-spacing-lg);
        box-shadow: var(--clx-shadow-md);
    }

    .info-card .card-header {
        background-color: var(--clx-gray-50);
        border-bottom: 2px solid var(--clx-gray-200);
        padding: var(--clx-spacing-md) var(--clx-spacing-lg);
    }

    .status-badge {
        font-size: 0.875rem;
        padding: var(--clx-spacing-xs) var(--clx-spacing-md);
    }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: var(--clx-spacing-lg);
    }

    .info-item {
        display: flex;
        flex-direction: column;
        gap: var(--clx-spacing-xs);
    }

    .info-item-full {
        grid-column: 1 / -1;
    }

    .info-label {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-xs);
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        color: var(--clx-gray-600);
    }

    .info-label svg {
        color: var(--clx-primary);
    }

    .info-value {
        font-size: 1rem;
        color: var(--clx-gray-900);
        font-weight: 500;
    }

    .notes-content {
        background-color: var(--clx-gray-50);
        padding: var(--clx-spacing-md);
        border-radius: var(--clx-radius-md);
        border: 1px solid var(--clx-gray-200);
        margin: 0;
        font-size: 0.875rem;
        color: var(--clx-gray-700);
        white-space: pre-wrap;
        font-family: var(--clx-font-family);
    }

    /* ============================================
       ACTION CARDS
       ============================================ */
    .action-card {
        margin-bottom: var(--clx-spacing-lg);
        box-shadow: var(--clx-shadow-md);
    }

    .card-header-primary {
        background-color: var(--clx-primary-light);
        border-bottom: 2px solid var(--clx-primary);
        color: var(--clx-primary);
    }

    .card-header-danger {
        background-color: var(--clx-danger-light);
        border-bottom: 2px solid var(--clx-danger);
        color: var(--clx-danger);
    }

    /* ============================================
       ACTION BUTTONS
       ============================================ */
    .action-buttons {
        display: flex;
        gap: var(--clx-spacing-sm);
        flex-wrap: wrap;
    }

    .action-buttons-sm {
        display: flex;
        gap: var(--clx-spacing-xs);
        justify-content: flex-end;
    }

    .btn:hover svg {
        color: currentColor;
    }

    /* ============================================
       FORM LAYOUT
       ============================================ */
    .form-grid-2col {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: var(--clx-spacing-md);
    }

    .form-group {
        margin-bottom: 0;
    }

    .form-label {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-xs);
        font-weight: 500;
        font-size: 0.875rem;
        color: var(--clx-gray-700);
        margin-bottom: var(--clx-spacing-sm);
    }

    .form-label svg {
        color: var(--clx-primary);
    }

    /* ============================================
       FOLLOW-UP TABLE
       ============================================ */
    .followup-table {
        font-size: 0.875rem;
    }

    .followup-table thead {
        background-color: var(--clx-gray-100);
    }

    .followup-table th {
        font-weight: 600;
        color: var(--clx-gray-700);
        font-size: 0.8125rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        padding: var(--clx-spacing-sm) var(--clx-spacing-md);
        border-bottom: 2px solid var(--clx-gray-300);
    }

    .followup-table td {
        padding: var(--clx-spacing-sm) var(--clx-spacing-md);
        vertical-align: middle;
    }

    .followup-table tbody tr:hover {
        background-color: var(--clx-gray-50);
    }

    /* ============================================
       BADGES
       ============================================ */
    .badge-warning { background-color: var(--clx-warning); color: #856404; }
    .badge-info { background-color: var(--clx-info); color: var(--clx-white); }
    .badge-primary { background-color: var(--clx-primary); color: var(--clx-white); }
    .badge-success { background-color: var(--clx-success); color: var(--clx-white); }
    .badge-danger { background-color: var(--clx-danger); color: var(--clx-white); }
    .badge-secondary { background-color: var(--clx-gray-600); color: var(--clx-white); }
    .badge-dark { background-color: var(--clx-gray-800); color: var(--clx-white); }

    /* ============================================
       ALERTS
       ============================================ */
    .alert {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
    }

    .alert svg {
        flex-shrink: 0;
    }

    /* ============================================
       RESPONSIVE DESIGN
       ============================================ */
    @@media (max-width: 768px) {
        .appointment-details-page {
            padding: var(--clx-spacing-md);
        }

        .page-header {
            flex-direction: column;
            align-items: stretch;
        }

        .page-header .btn {
            width: 100%;
        }

        .info-grid {
            grid-template-columns: 1fr;
        }

        .form-grid-2col {
            grid-template-columns: 1fr;
        }

        .action-buttons {
            flex-direction: column;
        }

        .action-buttons .btn {
            width: 100%;
        }

        .action-buttons-sm {
            flex-direction: column;
        }

        .followup-table {
            font-size: 0.75rem;
        }

        .followup-table th,
        .followup-table td {
            padding: var(--clx-spacing-xs);
        }
    }
</style>

@code {
    [Parameter] public long Id { get; set; }

    private class RescheduleFormModel 
    { 
        public DateTime Start = DateTime.Now.AddHours(1);
        public DateTime End = DateTime.Now.AddHours(2);
    }
    
    private class CancelFormModel { public string? Reason; }
    
    private class FollowUpFormModel 
    { 
        public DateTime Due = DateTime.Now.AddDays(1);
        public string? Reason; 
    }

    private AppointmentDto? Item;
    private List<FollowUpDto>? Fus;
    private bool showReschedule, showCancel;
    private bool _authorized;
    private bool _canModify;

    private CurrentUserInfo _userInfo = new(false, "", "", "");

    private RescheduleFormModel RescheduleForm = new();
    private CancelFormModel CancelForm = new();
    private FollowUpFormModel FollowUpForm = new();

    private string? Error;

    protected override async Task OnInitializedAsync()
    {
        _userInfo = await CurrentUser.GetCurrentUserAsync();
        
        if (!_userInfo.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await ReloadAsync();
    }

    private async Task ReloadAsync()
    {
        Item = await AppointmentService.GetByIdAsync(Id);
        
        if (Item is null)
        {
            Error = "Appointment not found.";
            return;
        }

        if (_userInfo.Role == "Patient")
        {
            var patientId = long.TryParse(_userInfo.PatientId, out var pid) ? pid : 0L;
            _authorized = Item.PatientId == patientId;
            _canModify = _authorized;
        }
        else if (_userInfo.Role == "Doctor")
        {
            var providerId = long.TryParse(_userInfo.ProviderId, out var pvid) ? pvid : 0L;
            _authorized = Item.ProviderId == providerId;
            _canModify = _authorized;
        }
        else if (_userInfo.Role == "Admin")
        {
            _authorized = true;
            _canModify = false;
        }
        else
        {
            _authorized = false;
            _canModify = false;
        }

        if (_authorized && Item is not null)
        {
            RescheduleForm.Start = Item.Start.LocalDateTime;
            RescheduleForm.End = Item.End.LocalDateTime;
            FollowUpForm.Due = DateTime.Now.AddDays(1);
            
            if (_userInfo.Role == "Doctor")
            {
                Fus = await FollowUpService.GetByAppointmentAsync(Item.Id);
            }
        }
    }

    private void ToggleReschedule() => showReschedule = !showReschedule;
    private void ToggleCancel() => showCancel = !showCancel;

    private async Task DoRescheduleAsync()
    {
        try
        {
            var req = new RescheduleAppointmentRequest(
                Id, 
                new DateTimeOffset(RescheduleForm.Start, DateTimeOffset.Now.Offset), 
                new DateTimeOffset(RescheduleForm.End, DateTimeOffset.Now.Offset)
            );
            await AppointmentService.RescheduleAsync(req);
            await ReloadAsync();
            showReschedule = false;
            Error = null;
        }
        catch (Exception ex) { Error = ex.Message; }
    }

    private async Task DoCancelAsync()
    {
        try
        {
            var req = new CancelAppointmentRequest(Id, CancelForm.Reason);
            await AppointmentService.CancelAsync(req);
            await ReloadAsync();
            showCancel = false;
            Error = null;
        }
        catch (Exception ex) { Error = ex.Message; }
    }

    private async Task CompleteAsync()
    {
        try 
        { 
            await AppointmentService.CompleteAsync(new CompleteAppointmentRequest(Id)); 
            await ReloadAsync();
            Error = null;
        } 
        catch (Exception ex) { Error = ex.Message; }
    }

    private async Task CreateFollowUpAsync()
    {
        try
        {
            var req = new CreateFollowUpRequest(
                Id, 
                new DateTimeOffset(FollowUpForm.Due, DateTimeOffset.Now.Offset), 
                FollowUpForm.Reason
            );
            await FollowUpService.CreateAsync(req);
            await ReloadAsync();
            FollowUpForm.Due = DateTime.Now.AddDays(1);
            FollowUpForm.Reason = null;
            Error = null;
        }
        catch (Exception ex) { Error = ex.Message; }
    }

    private async Task CompleteFollowUpAsync(long id)
    {
        try 
        { 
            await FollowUpService.CompleteAsync(new CompleteFollowUpRequest(id, null)); 
            await ReloadAsync();
            Error = null;
        } 
        catch (Exception ex) { Error = ex.Message; }
    }

    private async Task CancelFollowUpAsync(long id)
    {
        try 
        { 
            await FollowUpService.CancelAsync(new CancelFollowUpRequest(id, null)); 
            await ReloadAsync();
            Error = null;
        } 
        catch (Exception ex) { Error = ex.Message; }
    }

    private string GetStatusColor(AppointmentStatus status) => status switch
    {
        AppointmentStatus.Pending => "warning",
        AppointmentStatus.Confirmed => "info",
        AppointmentStatus.Scheduled => "primary",
        AppointmentStatus.Completed => "success",
        AppointmentStatus.Cancelled => "danger",
        AppointmentStatus.Rescheduled => "secondary",
        AppointmentStatus.NoShow => "dark",
        AppointmentStatus.Rejected => "danger",
        _ => "secondary"
    };

    private string GetFollowUpStatusColor(FollowUpStatus status) => status switch
    {
        FollowUpStatus.Pending => "warning",
        FollowUpStatus.Completed => "success",
        FollowUpStatus.Cancelled => "danger",
        _ => "secondary"
    };
}
