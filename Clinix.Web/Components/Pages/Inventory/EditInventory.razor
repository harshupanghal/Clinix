@page "/inventory/edit/{ItemId:int}"
@rendermode InteractiveServer
@using Clinix.Application.Interfaces
@using Clinix.Domain.Entities
@inject IInventoryService InventoryService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime Js

<h3>Edit Inventory Item</h3>

@if (_accessDenied)
{
    <div class="alert alert-danger">Access denied. Only Admins and Chemists can edit items.</div>
}
else if (_model == null)
{
    <div class="alert alert-info">Loading...</div>
}
else
{
    <EditForm Model="_model" OnValidSubmit="HandleEdit" FormName="EditInvItem-Form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Name</label>
            <InputText @bind-Value="_model.Name" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Type</label>
            <InputSelect @bind-Value="_model.Type" class="form-select">
                <option value="">Select Type</option>
                <option>Medicine</option>
                <option>Equipment</option>
                <option>Consumable</option>
            </InputSelect>
        </div>

        <div class="mb-3">
            <label>Category</label>
            <InputText @bind-Value="_model.Category" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Unit</label>
            <InputText @bind-Value="_model.Unit" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Min Stock</label>
            <InputNumber @bind-Value="_model.MinStock" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Stock Location</label>
            <InputText @bind-Value="_model.StockLocation" class="form-control" />
        </div>

        <button type="submit" class="btn btn-success w-100" disabled="@_isLoading">@_buttonText</button>
        <button type="button" class="btn btn-secondary w-100 mt-2" @onclick="@(() => Navigation.NavigateTo("/inventory"))">Cancel</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(_error))
    {
        <div class="alert alert-danger mt-2">@_error</div>
    }
    @if (!string.IsNullOrEmpty(_success))
    {
        <div class="alert alert-success mt-2">@_success</div>
    }
}

@code {
    [Parameter] public int ItemId { get; set; }
    [SupplyParameterFromForm]
    private InventoryItem? _model { get; set; } =  new ();
    private bool _isLoading;
    private string _buttonText = "Save Changes";
    private string? _error;
    private string? _success;
    private bool _accessDenied;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.IsInRole("Admin") && !user.IsInRole("Chemist"))
        {
            _accessDenied = true;
            return;
        }

        try
        {
            _model = await InventoryService.GetItemByIdAsync(ItemId);
            if (_model == null)
                _error = "Item not found";
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task HandleEdit()
    {
        _error = _success = null;
        _isLoading = true;
        _buttonText = "Saving...";

        try
        {
            if (_model != null)
            {
                await InventoryService.UpdateItemAsync(_model);
                _success = "Changes saved successfully!";
                await Task.Delay(800);
                Navigation.NavigateTo("/inventory");
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _isLoading = false;
            _buttonText = "Save Changes";
        }
    }
}
