@* @page "/admin/symptom-maps"
@attribute [Authorize(Roles="Admin")]
@inject HttpClient Http

<h3>Symptom → Specialty Map</h3>

<button class="btn btn-primary" @onclick="Load">Refresh</button>

@if (Maps == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead><tr><th>Keyword</th><th>Specialty</th><th></th></tr></thead>
        <tbody>
            @foreach(var m in Maps)
            {
                <tr>
                    <td>@m.Keyword</td>
                    <td>@m.Specialty</td>
                    <td>
                        <button class="btn btn-sm btn-danger" @onclick="() => Delete(m.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="mt-3">
    <h5>Add</h5>
    <input @bind="NewKeyword" placeholder="keyword" />
    <input @bind="NewSpecialty" placeholder="specialty" />
    <button class="btn btn-success" @onclick="Add">Add</button>
</div>

@code {
    List<SymptomSpecialtyMapDto>? Maps;
    string NewKeyword = "";
    string NewSpecialty = "";

    protected override async Task OnInitializedAsync() => await Load();

    async Task Load()
    {
        Maps = await Http.GetFromJsonAsync<List<SymptomSpecialtyMapDto>>("/api/admin/symptom-maps");
    }

    async Task Add()
    {
        var dto = new { Keyword = NewKeyword, Specialty = NewSpecialty };
        await Http.PostAsJsonAsync("/api/admin/symptom-maps", dto);
        NewKeyword = ""; NewSpecialty = "";
        await Load();
    }

    async Task Delete(int id)
    {
        await Http.DeleteAsync($"/api/admin/symptom-maps/{id}");
        await Load();
    }

    class SymptomSpecialtyMapDto { public int Id { get; set; } public string Keyword { get; set; } = ""; public string Specialty { get; set; } = ""; }
} *@
