@page "/user-management"
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer
@using Clinix.Application.Dtos.UserManagement
@using Clinix.Application.Interfaces
@using Clinix.Application.Interfaces.UserRepo
@inject IUserManagementService UserManagementService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>User Management</PageTitle>

<div class="container-fluid py-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h3 class="mb-1">User Management</h3>
            <p class="text-muted small mb-0">Manage all system users and their roles</p>
        </div>
        <button class="btn btn-primary" @onclick="RefreshData">
            <i class="bi bi-arrow-clockwise"></i> Refresh
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;"></div>
            <p class="mt-3 text-muted">Loading users...</p>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger d-flex align-items-center">
            <i class="bi bi-exclamation-triangle fs-4 me-3"></i>
            <div>
                <strong>Error:</strong> @errorMessage
            </div>
        </div>
    }
    else
    {
        <!-- Stats Cards -->
        <div class="row g-3 mb-4">
            <div class="col-md-2">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center py-4">
                        <div class="mb-2">
                            <i class="bi bi-people-fill text-primary fs-2"></i>
                        </div>
                        <h3 class="mb-1 fw-bold">@stats.TotalUsers</h3>
                        <p class="text-muted mb-0 small">Total Users</p>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center py-4">
                        <div class="mb-2">
                            <i class="bi bi-shield-check text-success fs-2"></i>
                        </div>
                        <h3 class="mb-1 fw-bold">@stats.TotalAdmins</h3>
                        <p class="text-muted mb-0 small">Admins</p>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center py-4">
                        <div class="mb-2">
                            <i class="bi bi-person-badge text-info fs-2"></i>
                        </div>
                        <h3 class="mb-1 fw-bold">@stats.TotalDoctors</h3>
                        <p class="text-muted mb-0 small">Doctors</p>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center py-4">
                        <div class="mb-2">
                            <i class="bi bi-person-heart text-danger fs-2"></i>
                        </div>
                        <h3 class="mb-1 fw-bold">@stats.TotalPatients</h3>
                        <p class="text-muted mb-0 small">Patients</p>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center py-4">
                        <div class="mb-2">
                            <i class="bi bi-person-workspace text-warning fs-2"></i>
                        </div>
                        <h3 class="mb-1 fw-bold">@stats.TotalStaff</h3>
                        <p class="text-muted mb-0 small">Staff</p>
                    </div>
                </div>
            </div>
            @* <div class="col-md-2">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center py-4">
                        <div class="mb-2">
                            <i class="bi bi-check-circle text-success fs-2"></i>
                        </div>
                        <h3 class="mb-1 fw-bold">@stats.ProfileCompletedCount</h3>
                        <p class="text-muted mb-0 small">Completed</p>
                    </div>
                </div>
            </div> *@
        </div>

        <!-- Filters and Search -->
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-body">
                <div class="row g-3 align-items-end">
                    <div class="col-md-4">
                        <label class="form-label small text-muted mb-2">
                            <i class="bi bi-search"></i> Search Users
                        </label>
                        <input type="text" class="form-control" placeholder="Search by name, email, or phone..." 
                               @bind="searchQuery" @bind:event="oninput" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label small text-muted mb-2">
                            <i class="bi bi-funnel"></i> Filter by Role
                        </label>
                        <select class="form-select" @bind="selectedRole">
                            <option value="">All Roles</option>
                            <option value="Admin">Admin</option>
                            <option value="Doctor">Doctor</option>
                            <option value="Patient">Patient</option>
                            <option value="Staff">Staff</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label small text-muted mb-2">
                            <i class="bi bi-sort-down"></i> Sort By
                        </label>
                        <select class="form-select" @bind="sortBy">
                            <option value="newest">Newest First</option>
                            <option value="oldest">Oldest First</option>
                            <option value="name">Name (A-Z)</option>
                            <option value="role">Role</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-secondary flex-fill" @onclick="ClearFilters">
                                <i class="bi bi-x-circle"></i> Clear
                            </button>
                            <button class="btn btn-primary flex-fill" @onclick="ApplyFilters">
                                <i class="bi bi-check-circle"></i> Apply
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Users Grid -->
        @if (filteredUsers.Count == 0)
        {
            <div class="card border-0 shadow-sm">
                <div class="card-body text-center py-5">
                    <i class="bi bi-inbox text-muted" style="font-size: 4rem;"></i>
                    <h5 class="mt-3 text-muted">No users found</h5>
                    <p class="text-muted">Try adjusting your search or filters</p>
                </div>
            </div>
        }
        else
        {
            <div class="row g-4">
                @foreach (var user in filteredUsers)
                {
                    <div class="col-xl-3 col-lg-4 col-md-6">
                        <div class="card border-0 shadow-sm h-100 user-card">
                            <div class="card-body p-4">
                                <!-- Avatar and Role Badge -->
                                <div class="d-flex justify-content-between align-items-start mb-3">
                                    <div class="avatar-circle @GetRoleColorClass(user.Role)">
                                        <span class="avatar-initials">@GetInitials(user.FullName)</span>
                                    </div>
                                    <span class="badge @GetRoleBadgeClass(user.Role) px-3 py-2">
                                        @user.Role
                                    </span>
                                </div>

                                <!-- User Info -->
                                <h5 class="card-title mb-2 text-truncate" title="@user.FullName">
                                    @user.FullName
                                </h5>
                                
                                <div class="user-details mb-3">
                                    <div class="detail-item">
                                        <i class="bi bi-envelope text-muted"></i>
                                        <span class="text-truncate" title="@user.Email">@user.Email</span>
                                    </div>
                                    <div class="detail-item">
                                        <i class="bi bi-telephone text-muted"></i>
                                        <span>@user.Phone</span>
                                    </div>
                                    @if (!string.IsNullOrEmpty(user.Specialty))
                                    {
                                        <div class="detail-item">
                                            <i class="bi bi-star text-muted"></i>
                                            <span>@user.Specialty</span>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(user.Department))
                                    {
                                        <div class="detail-item">
                                            <i class="bi bi-building text-muted"></i>
                                            <span>@user.Department</span>
                                        </div>
                                    }
                                </div>

                                <!-- Status Badges -->
                                <div class="d-flex gap-2 flex-wrap mb-3">
                                    @if (user.IsProfileCompleted)
                                    {
                                        <span class="badge bg-light text-success border border-success">
                                            <i class="bi bi-check-circle"></i> Completed
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-light text-warning border border-warning">
                                            <i class="bi bi-exclamation-circle"></i> Incomplete
                                        </span>
                                    }
                                    
                                    @if (user.IsActive.HasValue)
                                    {
                                        @if (user.IsActive.Value)
                                        {
                                            <span class="badge bg-light text-success border border-success">
                                                <i class="bi bi-circle-fill" style="font-size: 0.5rem;"></i> Active
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-light text-danger border border-danger">
                                                <i class="bi bi-circle-fill" style="font-size: 0.5rem;"></i> Inactive
                                            </span>
                                        }
                                    }
                                </div>

                                <!-- Action Buttons -->
                                <div class="d-flex gap-2">
                                    <button class="btn btn-sm btn-outline-primary flex-fill" 
                                            @onclick="() => ViewUserDetails(user.Id)">
                                        <i class="bi bi-eye"></i> View
                                    </button>
                                    <button class="btn btn-sm btn-outline-secondary flex-fill" 
                                            @onclick="() => EditUser(user)">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                    @if (user.Role != "Admin")
                                    {
                                        <button class="btn btn-sm btn-outline-danger" 
                                                @onclick="() => ConfirmDeleteUser(user)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    }
                                </div>

                                <!-- Created Date -->
                                <div class="text-muted small mt-3 text-center">
                                    <i class="bi bi-clock"></i> Joined @user.CreatedAt.ToString("MMM dd, yyyy")
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination Info -->
            <div class="card border-0 shadow-sm mt-4">
                <div class="card-body py-3 text-center">
                    <span class="text-muted">
                        Showing <strong>@filteredUsers.Count</strong> of <strong>@allUsers.Count</strong> users
                    </span>
                </div>
            </div>
        }
    }
</div>

<!-- Edit User Modal -->
@if (showEditModal && editingUser != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Full Name</label>
                        <input type="text" class="form-control" @bind="editingUser.FullName" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" @bind="editingUser.Email" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Phone</label>
                        <input type="text" class="form-control" @bind="editingUser.Phone" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <select class="form-select" @bind="editingUser.Role" disabled>
                            <option value="Admin">Admin</option>
                            <option value="Doctor">Doctor</option>
                            <option value="Patient">Patient</option>
                            <option value="Staff">Staff</option>
                        </select>
                        <small class="text-muted">Role cannot be changed</small>
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveUser">
                        <i class="bi bi-check-circle"></i> Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal && deletingUser != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title text-danger">
                        <i class="bi bi-exclamation-triangle"></i> Confirm Delete
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete <strong>@deletingUser.FullName</strong>?</p>
                    <p class="text-muted small mb-0">This action will soft-delete the user and can be reversed.</p>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteUser">
                        <i class="bi bi-trash"></i> Delete User
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .user-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        cursor: pointer;
    }

    .user-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 0.5rem 1.5rem rgba(0,0,0,0.15) !important;
    }

    .avatar-circle {
        width: 64px;
        height: 64px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 1.5rem;
        color: white;
    }

    .avatar-initials {
        text-transform: uppercase;
    }

    .role-admin { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
    .role-doctor { background: linear-gradient(135deg, #06beb6 0%, #48b1bf 100%); }
    .role-patient { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
    .role-staff { background: linear-gradient(135deg, #ffa751 0%, #ffe259 100%); }

    .user-details {
        font-size: 0.875rem;
    }

    .detail-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
        color: #6c757d;
    }

    .detail-item i {
        flex-shrink: 0;
        width: 16px;
    }

    .detail-item span {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
</style>

@code {
    private List<UserListDto> allUsers = new();
    private List<UserListDto> filteredUsers = new();
    private UserStatsDto stats = new(0, 0, 0, 0, 0, 0, 0);
    private bool isLoading = true;
    private string? errorMessage = null;

    private string searchQuery = "";
    private string selectedRole = "";
    private string sortBy = "newest";

    private bool showEditModal = false;
    private bool showDeleteModal = false;
    
    // Changed to a mutable class for editing
    private EditUserModel? editingUser = null;
    private UserListDto? deletingUser = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            stats = await UserManagementService.GetUserStatsAsync();
            allUsers = await UserManagementService.GetAllUsersAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load users: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        IEnumerable<UserListDto> filtered = allUsers;

        // Search filter
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            var query = searchQuery.ToLowerInvariant();
            filtered = filtered.Where(u =>
                u.FullName.ToLowerInvariant().Contains(query) ||
                u.Email.ToLowerInvariant().Contains(query) ||
                u.Phone.Contains(query)
            );
        }

        // Role filter
        if (!string.IsNullOrEmpty(selectedRole))
        {
            filtered = filtered.Where(u => u.Role == selectedRole);
        }

        // Sorting - FIXED: Added .ToList() to all branches
        filteredUsers = sortBy switch
        {
            "newest" => filtered.OrderByDescending(u => u.CreatedAt).ToList(),
            "oldest" => filtered.OrderBy(u => u.CreatedAt).ToList(),
            "name" => filtered.OrderBy(u => u.FullName).ToList(),
            "role" => filtered.OrderBy(u => u.Role).ThenBy(u => u.FullName).ToList(),
            _ => filtered.OrderByDescending(u => u.CreatedAt).ToList()
        };
    }

    private void ClearFilters()
    {
        searchQuery = "";
        selectedRole = "";
        sortBy = "newest";
        ApplyFilters();
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private string GetInitials(string fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName)) return "??";
        var parts = fullName.Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts.Length >= 2
            ? $"{parts[0][0]}{parts[^1][0]}"
            : parts[0].Length >= 2 ? $"{parts[0][0]}{parts[0][1]}" : parts[0][0].ToString();
    }

    private string GetRoleColorClass(string role) => role switch
    {
        "Admin" => "role-admin",
        "Doctor" => "role-doctor",
        "Patient" => "role-patient",
        "Staff" => "role-staff",
        _ => "bg-secondary"
    };

    private string GetRoleBadgeClass(string role) => role switch
    {
        "Admin" => "bg-light text-purple border border-purple",
        "Doctor" => "bg-light text-info border border-info",
        "Patient" => "bg-light text-danger border border-danger",
        "Staff" => "bg-light text-warning border border-warning",
        _ => "bg-secondary"
    };

    private void ViewUserDetails(long userId)
    {
        Navigation.NavigateTo($"/user-details/{userId}");
    }

    // FIXED: Using mutable EditUserModel instead of record
    private void EditUser(UserListDto user)
    {
        editingUser = new EditUserModel
        {
            Id = user.Id,
            FullName = user.FullName,
            Email = user.Email,
            Phone = user.Phone,
            Role = user.Role
        };
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        editingUser = null;
    }

    private async Task SaveUser()
    {
        if (editingUser == null) return;

        var request = new UpdateUserRequest(
            editingUser.Id,
            editingUser.FullName,
            editingUser.Email,
            editingUser.Phone,
            editingUser.Role
        );

        var result = await UserManagementService.UpdateUserAsync(request, "Admin");
        
        if (result.IsSuccess)
        {
            await LoadData();
            CloseEditModal();
        }
        else
        {
            errorMessage = result.Error;
        }
    }

    private void ConfirmDeleteUser(UserListDto user)
    {
        deletingUser = user;
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        deletingUser = null;
    }

    private async Task DeleteUser()
    {
        if (deletingUser == null) return;

        var result = await UserManagementService.DeleteUserAsync(deletingUser.Id, "Admin");
        
        if (result.IsSuccess)
        {
            await LoadData();
            CloseDeleteModal();
        }
        else
        {
            errorMessage = result.Error;
        }
    }

    // ADDED: Mutable model class for editing
    private class EditUserModel
    {
        public long Id { get; set; }
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }
}

