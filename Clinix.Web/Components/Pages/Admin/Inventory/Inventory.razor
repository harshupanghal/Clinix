@page "/inventory"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin, Chemist")] 
@using Clinix.Application.Interfaces
@using Clinix.Application.Interfaces.Functionalities
@using Clinix.Domain.Entities
@using Microsoft.AspNetCore.Components.Authorization
@inject IInventoryService InventoryService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<h3>Inventory Management</h3>

@if (_accessDenied)
{
    <div class="alert alert-danger">Access denied. Only Admins and Chemists can view this page.</div>
}
else
{
    <div class="card p-3 mb-4 shadow-sm inventory-search-card">
    <div class="row g-2 align-items-center">
        <div class="col-md-4 col-12">
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input class="form-control" placeholder="Search by name..." @bind="_searchTerm" @bind:event="oninput" />
            </div>
        </div>

        <div class="col-md-3 col-6">
            <select class="form-select" @bind="_filterType">
                <option value="">All Types</option>
                <option>Medicine</option>
                <option>Equipment</option>
                <option>Consumable</option>
            </select>
        </div>

        <div class="col-md-5 col-6 d-flex gap-2">
            <button class="btn btn-primary flex-fill d-flex align-items-center justify-content-center" @onclick="LoadInventory">
                <i class="bi bi-funnel me-1"></i> Filter
            </button>
            <button class="btn btn-success flex-fill d-flex align-items-center justify-content-center" @onclick="AddNewItem">
                <i class="bi bi-plus-lg me-1"></i> Add Item
            </button>
        </div>
    </div>
</div>


    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Category</th>
                <th>Unit</th>
                <th>Stock</th>
                <th>Min Stock</th>
                <th>Location</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in PagedItems)
            {
                <tr class="@(item.CurrentStock <= item.MinStock ? "table-danger" : "")">
                    <td>@item.Name</td>
                    <td>@item.Type</td>
                    <td>@item.Category</td>
                    <td>@item.Unit</td>
                    <td>@item.CurrentStock</td>
                    <td>@item.MinStock</td>
                    <td>@item.StockLocation</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-1" @onclick="() => EditItem(item)">Edit</button>
                        <button class="btn btn-sm btn-info me-1" @onclick="() => StockInOut(item)">Stock In/Out</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteItem(item)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination -->
    <div class="d-flex justify-content-between align-items-center">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
        <span>Page @_currentPage of @_totalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(_currentPage == _totalPages)">Next</button>
    </div>
}

@code {
    private List<InventoryItemDto> _allItems = new();
    private string _searchTerm = string.Empty;
    private string _filterType = string.Empty;

    private int _currentPage = 1;
    private int _pageSize = 10;
    private int _totalPages => (int)Math.Ceiling(_allItems.Count / (double)_pageSize);

    private bool _accessDenied = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.IsInRole("Admin") && !user.IsInRole("Chemist"))
        {
            _accessDenied = true;
            return;
        }

        await LoadInventory();
    }

    private IEnumerable<InventoryItemDto> PagedItems =>
        _allItems.Skip((_currentPage - 1) * _pageSize).Take(_pageSize);

    private async Task LoadInventory()
    {
        var items = await InventoryService.GetInventoryAsync();
        _allItems = items
            .Where(x =>
                (string.IsNullOrEmpty(_searchTerm) || x.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(_filterType) || x.Type.Equals(_filterType, StringComparison.OrdinalIgnoreCase)))
            .Select(x => new InventoryItemDto
            {
                Id = x.Id,
                Name = x.Name,
                Type = x.Type,
                Category = x.Category,
                Unit = x.Unit,
                CurrentStock = x.CurrentStock,
                MinStock = x.MinStock,
                StockLocation = x.StockLocation
            })
            .ToList();

        _currentPage = 1;
    }

    private void PreviousPage() => _currentPage = Math.Max(1, _currentPage - 1);
    private void NextPage() => _currentPage = Math.Min(_totalPages, _currentPage + 1);

    private void AddNewItem() => Navigation.NavigateTo("/inventory/add");
    private void EditItem(InventoryItemDto item) => Navigation.NavigateTo($"/inventory/edit/{item.Id}");
    private void StockInOut(InventoryItemDto item) => Navigation.NavigateTo($"/inventory/stock/{item.Id}");
    private async Task DeleteItem(InventoryItemDto item)
    {
        if (!await JsConfirm($"Are you sure you want to delete {item.Name}?")) return;
        await InventoryService.DeleteItemAsync(item.Id);
        await LoadInventory();
    }

    // JS Confirm wrapper
    [Inject] private IJSRuntime Js { get; set; } = default!;
    private async Task<bool> JsConfirm(string message)
        => await Js.InvokeAsync<bool>("confirm", message);
}
