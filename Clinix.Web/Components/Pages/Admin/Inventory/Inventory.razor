@page "/inventory"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin, Chemist")] 
@using Clinix.Application.Interfaces
@using Clinix.Application.Interfaces.Functionalities
@using Clinix.Domain.Entities
@using Microsoft.AspNetCore.Components.Authorization
@inject IInventoryService InventoryService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime Js

<div class="inventory-page">

    <div class="page-header">
        <div>
            <h1 class="page-title">
                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M2.5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2h-11zm5 2h1a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1z"/>
                    <path d="M1 7v-.5a.5.5 0 0 1 .5-.5h.5a.5.5 0 0 1 .5.5V7h1V6.5a.5.5 0 0 1 .5-.5h.5a.5.5 0 0 1 .5.5V7h1V6.5a.5.5 0 0 1 .5-.5h.5a.5.5 0 0 1 .5.5V7h1V6.5a.5.5 0 0 1 .5-.5h.5a.5.5 0 0 1 .5.5V7h1V6.5a.5.5 0 0 1 .5-.5h.5a.5.5 0 0 1 .5.5V7h.5a.5.5 0 0 1 .5.5v.5H1z"/>
                </svg>
                Inventory Management
            </h1>
            <p class="page-subtitle">Track and manage medical supplies, equipment, and consumables</p>
        </div>
        <button class="btn btn-success" @onclick="AddNewItem">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
            </svg>
            Add New Item
        </button>
    </div>

    @if (_accessDenied)
    {
        <div class="alert alert-danger">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/>
            </svg>
            <strong>Access Denied</strong> - Only Admins and Chemists can view this page.
        </div>
    }
    else
    {
        <div class="card search-filter-card">
            <div class="card-body">
                <div class="search-filter-grid">
                   
                    <div class="search-input-wrapper">
                        <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
                        </svg>
                        <input type="text" 
                               class="form-control form-control-icon" 
                               placeholder="Search by item name..." 
                               @bind="_searchTerm" 
                               @bind:event="oninput" />
                    </div>

                    <div>
                        <select class="form-select" @bind="_filterType">
                            <option value="">All Types</option>
                            <option>Medicine</option>
                            <option>Equipment</option>
                            <option>Consumable</option>
                        </select>
                    </div>

                    <button class="btn btn-primary" @onclick="LoadInventory">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z"/>
                        </svg>
                        Apply Filter
                    </button>
                </div>
            </div>
        </div>

        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon stat-icon-primary">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z"/>
                    </svg>
                </div>
                <div class="stat-content">
                    <div class="stat-label">Total Items</div>
                    <div class="stat-value">@_allItems.Count</div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-icon stat-icon-danger">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                        <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/>
                    </svg>
                </div>
                <div class="stat-content">
                    <div class="stat-label">Low Stock</div>
                    <div class="stat-value">@_allItems.Count(x => x.CurrentStock <= x.MinStock)</div>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-icon stat-icon-success">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z"/>
                    </svg>
                </div>
                <div class="stat-content">
                    <div class="stat-label">In Stock</div>
                    <div class="stat-value">@_allItems.Count(x => x.CurrentStock > x.MinStock)</div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Item Name</th>
                            <th>Type</th>
                            <th>Category</th>
                            <th>Unit</th>
                            <th>Current Stock</th>
                            <th>Min Stock</th>
                            <th>Location</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!PagedItems.Any())
                        {
                            <tr>
                                <td colspan="8" class="text-center empty-state">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="currentColor" viewBox="0 0 16 16">
                                        <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z"/>
                                    </svg>
                                    <p>No items found</p>
                                </td>
                            </tr>
                        }
                        @foreach (var item in PagedItems)
                        {
                            <tr class="@(item.CurrentStock <= item.MinStock ? "row-warning" : "")">
                                <td>
                                    <div class="item-name-cell">
                                        <strong>@item.Name</strong>
                                        @if (item.CurrentStock <= item.MinStock)
                                        {
                                            <span class="badge badge-danger">Low Stock</span>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <span class="badge badge-primary">@item.Type</span>
                                </td>
                                <td>@item.Category</td>
                                <td><span class="text-muted">@item.Unit</span></td>
                                <td>
                                    <span class="stock-value @(item.CurrentStock <= item.MinStock ? "text-danger" : "")">
                                        @item.CurrentStock
                                    </span>
                                </td>
                                <td>@item.MinStock</td>
                                <td>
                                    <span class="location-badge">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" fill="currentColor" viewBox="0 0 16 16">
                                            <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"/>
                                        </svg>
                                        @item.StockLocation
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn btn-sm btn-secondary" @onclick="() => EditItem(item)" title="Edit">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                                <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z"/>
                                            </svg>
                                        </button>
                                        <button class="btn btn-sm btn-primary" @onclick="() => StockInOut(item)" title="Stock In/Out">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                                <path fill-rule="evenodd" d="M8 3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0v-4A.5.5 0 0 1 8 3zm0 8a.5.5 0 0 1 .5.5v1.5a.5.5 0 0 1-1 0V11.5A.5.5 0 0 1 8 11zM4.146 5.854a.5.5 0 0 1 0-.708l1-1a.5.5 0 1 1 .708.708l-1 1a.5.5 0 0 1-.708 0zm7.708 0a.5.5 0 0 1-.708 0l-1-1a.5.5 0 0 1 .708-.708l1 1a.5.5 0 0 1 0 .708z"/>
                                            </svg>
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteItem(item)" title="Delete">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                                                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                                            </svg>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @if (_totalPages > 1)
            {
                <div class="card-footer">
                    <div class="pagination-wrapper">
                        <button class="btn btn-secondary btn-sm" @onclick="PreviousPage" disabled="@(_currentPage == 1)">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
                            </svg>
                            Previous
                        </button>
                        
                        <span class="pagination-info">
                            Page <strong>@_currentPage</strong> of <strong>@_totalPages</strong>
                            <span class="text-muted">(@_allItems.Count items)</span>
                        </span>
                        
                        <button class="btn btn-secondary btn-sm" @onclick="NextPage" disabled="@(_currentPage == _totalPages)">
                            Next
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
                            </svg>
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
 
    .inventory-page {
        padding: var(--clx-spacing-lg);
        max-width: 1400px;
        margin: 0 auto;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: var(--clx-spacing-xl);
        gap: var(--clx-spacing-md);
    }

    .page-title {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
        margin: 0 0 var(--clx-spacing-xs) 0;
        color: var(--clx-gray-900);
        font-size: 1.75rem;
    }

    .page-title svg {
        color: var(--clx-primary);
    }

    .page-subtitle {
        color: var(--clx-gray-600);
        font-size: 0.875rem;
        margin: 0;
    }

    .search-filter-card {
        margin-bottom: var(--clx-spacing-lg);
    }

    .search-filter-grid {
        display: grid;
        grid-template-columns: 1fr auto auto;
        gap: var(--clx-spacing-md);
        align-items: center;
    }

    .search-input-wrapper {
        position: relative;
    }

    .search-icon {
        position: absolute;
        left: var(--clx-spacing-md);
        top: 50%;
        transform: translateY(-50%);
        color: var(--clx-gray-500);
        pointer-events: none;
    }

    .form-control-icon {
        padding-left: 2.5rem;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: var(--clx-spacing-md);
        margin-bottom: var(--clx-spacing-lg);
    }

    .stat-card {
        background: var(--clx-white);
        border: 1px solid var(--clx-gray-200);
        border-radius: var(--clx-radius-lg);
        padding: var(--clx-spacing-lg);
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-md);
        transition: all var(--clx-transition-normal);
    }

    .stat-card:hover {
        box-shadow: var(--clx-shadow-md);
        transform: translateY(-2px);
    }

    .stat-icon {
        width: 3rem;
        height: 3rem;
        border-radius: var(--clx-radius-lg);
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    }

    .stat-icon-primary {
        background-color: var(--clx-primary-light);
        color: var(--clx-primary);
    }

    .stat-icon-danger {
        background-color: var(--clx-danger-light);
        color: var(--clx-danger);
    }

    .stat-icon-success {
        background-color: var(--clx-success-light);
        color: var(--clx-success);
    }

    .stat-content {
        flex: 1;
    }

    .stat-label {
        font-size: 0.8125rem;
        color: var(--clx-gray-600);
        margin-bottom: var(--clx-spacing-xs);
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--clx-gray-900);
        line-height: 1;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .row-warning {
        background-color: var(--clx-warning-light);
        border-left: 3px solid var(--clx-warning);
    }

    .item-name-cell {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
        flex-wrap: wrap;
    }

    .stock-value {
        font-weight: 600;
        font-size: 1rem;
    }

    .location-badge {
        display: inline-flex;
        align-items: center;
        gap: var(--clx-spacing-xs);
        padding: var(--clx-spacing-xs) var(--clx-spacing-sm);
        background-color: var(--clx-gray-100);
        border-radius: var(--clx-radius-sm);
        font-size: 0.8125rem;
        color: var(--clx-gray-700);
    }

    .empty-state {
        padding: var(--clx-spacing-2xl) var(--clx-spacing-md);
        text-align: center;
        color: var(--clx-gray-500);
    }

    .empty-state svg {
        margin-bottom: var(--clx-spacing-md);
        opacity: 0.5;
    }

    .empty-state p {
        margin: 0;
        font-size: 0.875rem;
    }


.action-buttons {
    display: flex;
    gap: var(--clx-spacing-xs);
    justify-content: flex-end;
}

.btn-sm svg {
    display: block;
}

.action-buttons .btn-sm:hover svg {
    color: black; 
}

.btn-secondary:hover {
    background-color: var(--clx-gray-600);
    border-color: var(--clx-gray-600);
    color: var(--clx-white);
}

.action-buttons .btn-primary {
    background-color: var(--clx-info);
    border-color: var(--clx-info);
}

.action-buttons .btn-primary:hover {
    background-color: #138496;
    border-color: #117a8b;
}


    .btn-sm svg {
        display: block;
    }

    .pagination-wrapper {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: var(--clx-spacing-md);
    }

    .pagination-info {
        font-size: 0.875rem;
        color: var(--clx-gray-700);
    }

    .pagination-info strong {
        color: var(--clx-gray-900);
    }

    @@media (max-width: 768px) {
        .inventory-page {
            padding: var(--clx-spacing-md);
        }

        .page-header {
            flex-direction: column;
            align-items: stretch;
        }

        .page-header .btn {
            width: 100%;
        }

        .search-filter-grid {
            grid-template-columns: 1fr;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .action-buttons {
            flex-wrap: wrap;
        }

        .pagination-wrapper {
            flex-direction: column;
            text-align: center;
        }
    }

    @@media (max-width: 1024px) {
        .table {
            font-size: 0.8125rem;
        }

        .stat-value {
            font-size: 1.25rem;
        }
    }
</style>

@code {
    private List<InventoryItemDto> _allItems = new();
    private string _searchTerm = string.Empty;
    private string _filterType = string.Empty;

    private int _currentPage = 1;
    private int _pageSize = 10;
    private int _totalPages => (int)Math.Ceiling(_allItems.Count / (double)_pageSize);

    private bool _accessDenied = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.IsInRole("Admin") && !user.IsInRole("Chemist"))
        {
            _accessDenied = true;
            return;
        }

        await LoadInventory();
    }

    private IEnumerable<InventoryItemDto> PagedItems =>
        _allItems.Skip((_currentPage - 1) * _pageSize).Take(_pageSize);

    private async Task LoadInventory()
    {
        var items = await InventoryService.GetInventoryAsync();
        _allItems = items
            .Where(x =>
                (string.IsNullOrEmpty(_searchTerm) || x.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(_filterType) || x.Type.Equals(_filterType, StringComparison.OrdinalIgnoreCase)))
            .Select(x => new InventoryItemDto
            {
                Id = x.Id,
                Name = x.Name,
                Type = x.Type,
                Category = x.Category,
                Unit = x.Unit,
                CurrentStock = x.CurrentStock,
                MinStock = x.MinStock,
                StockLocation = x.StockLocation
            })
            .ToList();

        _currentPage = 1;
    }

    private void PreviousPage() => _currentPage = Math.Max(1, _currentPage - 1);
    private void NextPage() => _currentPage = Math.Min(_totalPages, _currentPage + 1);

    private void AddNewItem() => Navigation.NavigateTo("/inventory/add");
    private void EditItem(InventoryItemDto item) => Navigation.NavigateTo($"/inventory/edit/{item.Id}");
    private void StockInOut(InventoryItemDto item) => Navigation.NavigateTo($"/inventory/stock/{item.Id}");
    private async Task DeleteItem(InventoryItemDto item)
    {
        if (!await JsConfirm($"Are you sure you want to delete {item.Name}?")) return;
        await InventoryService.DeleteItemAsync(item.Id);
        await LoadInventory();
    }

    private async Task<bool> JsConfirm(string message)
        => await Js.InvokeAsync<bool>("confirm", message);
}
