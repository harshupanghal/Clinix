@page "/inventory/add"
@attribute [Authorize(Roles = "Admin, Chemist")] 
@rendermode InteractiveServer
@using Clinix.Application.Interfaces
@using Clinix.Application.Interfaces.Functionalities
@using Clinix.Domain.Entities.Inventory
@inject IInventoryService InventoryService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<h3 class="mb-4 text-primary">Add New Inventory Item</h3>

@if (_accessDenied)
{
    <div class="alert alert-danger">Access denied. Only Admins and Chemists can add items.</div>
}
else
{
    <div class="card shadow-sm p-4 inventory-card" style="max-width:600px;">
        <EditForm Model="_model" OnValidSubmit="HandleAdd" FormName="AddInventoryForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="mb-3">
                <label class="form-label fw-semibold">Item Name</label>
                <InputText @bind-Value="_model.Name" class="form-control" placeholder="e.g. Paracetamol" />
            </div>

            <div class="mb-3">
                <label class="form-label fw-semibold">Type</label>
                <InputSelect @bind-Value="_model.Type" class="form-select">
                    <option value="">-- Select Type --</option>
                    <option>Medicine</option>
                    <option>Equipment</option>
                    <option>Consumable</option>
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label fw-semibold">Category</label>
                <InputText @bind-Value="_model.Category" class="form-control" placeholder="e.g. Analgesic" />
            </div>

            <div class="mb-3">
                <label class="form-label fw-semibold">Unit</label>
                <InputText @bind-Value="_model.Unit" class="form-control" placeholder="e.g. Tablet, Bottle" />
            </div>

            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label fw-semibold">Minimum Stock</label>
                    <InputNumber @bind-Value="_model.MinStock" class="form-control" placeholder="e.g. 50" />
                </div>
                <div class="col-md-6">
                    <label class="form-label fw-semibold">Stock Location</label>
                    <InputText @bind-Value="_model.StockLocation" class="form-control" placeholder="e.g. Store Room A" />
                </div>
            </div>

            <div class="mt-4 d-flex gap-2">
                <button type="submit" class="btn btn-success flex-fill" disabled="@_isLoading">
                    @if (_isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Adding...</span>
                    }
                    else
                    {
                        <span><i class="bi bi-plus-circle me-1"></i> Add Item</span>
                    }
                </button>
                <button type="button" class="btn btn-secondary flex-fill" @onclick="@(() => Navigation.NavigateTo("/inventory"))">
                    Cancel
                </button>
            </div>

            @if (!string.IsNullOrEmpty(_error))
            {
                <div class="alert alert-danger mt-3">@_error</div>
            }
            @if (!string.IsNullOrEmpty(_success))
            {
                <div class="alert alert-success mt-3">@_success</div>
            }
        </EditForm>
    </div>
}

@code {
    private InventoryItem _model { get; set; } = new();
    private bool _isLoading;
    private string? _error;
    private string? _success;
    private bool _accessDenied;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.IsInRole("Admin") && !user.IsInRole("Chemist"))
        {
            _accessDenied = true;
        }
    }

    private async Task HandleAdd()
    {
        _error = _success = null;
        _isLoading = true;

        try
        {
            await InventoryService.AddItemAsync(_model);
            _success = "Item added successfully!";
            await Task.Delay(800); // short delay to show success
            Navigation.NavigateTo("/inventory");
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _isLoading = false;
        }
    }
}
