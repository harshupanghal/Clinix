@page "/inventory/add"
@attribute [Authorize(Roles = "Admin, Chemist")] 
@rendermode InteractiveServer
@using Clinix.Application.Interfaces
@using Clinix.Application.Interfaces.Functionalities
@using Clinix.Domain.Entities.Inventory
@inject IInventoryService InventoryService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<div class="add-inventory-page">
    <!-- Page Header -->
    <div class="page-header">
        <div>
            <h1 class="page-title">
                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                </svg>
                Add New Inventory Item
            </h1>
            <p class="page-subtitle">Create a new item in the inventory system</p>
        </div>
        <button class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/inventory"))">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>
            </svg>
            Back to Inventory
        </button>
    </div>

    @if (_accessDenied)
    {
        <div class="alert alert-danger">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/>
            </svg>
            <strong>Access Denied</strong> - Only Admins and Chemists can add items.
        </div>
    }
    else
    {
        <div class="card form-card">
            <div class="card-body">
                <EditForm Model="_model" OnValidSubmit="HandleAdd" FormName="AddInventoryForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="validation-summary" />

                    <div class="form-grid-2col">
                        <div class="form-group">
                            <label class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z"/>
                                </svg>
                                Item Name
                            </label>
                            <InputText @bind-Value="_model.Name" class="form-control" placeholder="e.g. Paracetamol 500mg" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M1 2.5A1.5 1.5 0 0 1 2.5 1h3A1.5 1.5 0 0 1 7 2.5v3A1.5 1.5 0 0 1 5.5 7h-3A1.5 1.5 0 0 1 1 5.5v-3zm8 0A1.5 1.5 0 0 1 10.5 1h3A1.5 1.5 0 0 1 15 2.5v3A1.5 1.5 0 0 1 13.5 7h-3A1.5 1.5 0 0 1 9 5.5v-3z"/>
                                </svg>
                                Type
                            </label>
                            <InputSelect @bind-Value="_model.Type" class="form-select">
                                <option value="">-- Select Type --</option>
                                <option>Medicine</option>
                                <option>Equipment</option>
                                <option>Consumable</option>
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.825a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31L.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3zm-8.322.12C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139z"/>
                                </svg>
                                Category
                            </label>
                            <InputText @bind-Value="_model.Category" class="form-control" placeholder="e.g. Analgesic, Surgical" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h9A1.5 1.5 0 0 1 12 3.5V5h1.02a1.5 1.5 0 0 1 1.17.563l1.481 1.85a1.5 1.5 0 0 1 .329.938V10.5a1.5 1.5 0 0 1-1.5 1.5H14a2 2 0 1 1-4 0H5a2 2 0 1 1-4 0 1 1 0 0 1-1-1v-5zm1.5-.5a.5.5 0 0 0-.5.5v4.667c.166-.043.34-.064.518-.073C1.875 7.822 2.396 7.62 3 7.62c.604 0 1.125.202 1.482.474A.497.497 0 0 0 5 8a.5.5 0 0 0 .018-.094c.357-.272.878-.474 1.482-.474.604 0 1.125.202 1.482.474A.497.497 0 0 0 8.5 8V4.5a.5.5 0 0 0-.5-.5h-7z"/>
                                </svg>
                                Unit
                            </label>
                            <InputText @bind-Value="_model.Unit" class="form-control" placeholder="e.g. Tablet, Bottle, Piece" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                    <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/>
                                </svg>
                                Minimum Stock
                            </label>
                            <InputNumber @bind-Value="_model.MinStock" class="form-control" placeholder="e.g. 50" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"/>
                                </svg>
                                Stock Location
                            </label>
                            <InputText @bind-Value="_model.StockLocation" class="form-control" placeholder="e.g. Store Room A, Shelf 3" />
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn btn-success" disabled="@_isLoading">
                            @if (_isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Adding...</span>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                                </svg>
                                <span>Add Item</span>
                            }
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="@(() => Navigation.NavigateTo("/inventory"))">
                            Cancel
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(_error))
                    {
                        <div class="alert alert-danger mt-3">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/>
                            </svg>
                            @_error
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(_success))
                    {
                        <div class="alert alert-success mt-3">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
                            </svg>
                            @_success
                        </div>
                    }
                </EditForm>
            </div>
        </div>
    }
</div>

<style>
 
    .add-inventory-page {
        padding: var(--clx-spacing-lg);
        max-width: 900px;
        margin: 0 auto;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: var(--clx-spacing-xl);
        gap: var(--clx-spacing-md);
    }

    .page-title {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
        margin: 0 0 var(--clx-spacing-xs) 0;
        color: var(--clx-gray-900);
        font-size: 1.75rem;
    }

    .page-title svg {
        color: var(--clx-success);
    }

    .page-subtitle {
        color: var(--clx-gray-600);
        font-size: 0.875rem;
        margin: 0;
    }

    .form-card {
        box-shadow: var(--clx-shadow-md);
    }

    .form-grid-2col {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: var(--clx-spacing-md);
        margin-bottom: var(--clx-spacing-md);
    }

    .form-group {
        margin-bottom: var(--clx-spacing-md);
    }

    .form-label {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-xs);
        font-weight: 500;
        font-size: 0.875rem;
        color: var(--clx-gray-700);
        margin-bottom: var(--clx-spacing-sm);
    }

    .form-label svg {
        color: var(--clx-primary);
    }

    .form-actions {
        display: flex;
        gap: var(--clx-spacing-md);
        margin-top: var(--clx-spacing-lg);
    }

    .form-actions .btn {
        flex: 1;
    }

    .validation-summary {
        background-color: var(--clx-danger-light);
        border: 1px solid var(--clx-danger);
        border-radius: var(--clx-radius-md);
        padding: var(--clx-spacing-md);
        margin-bottom: var(--clx-spacing-md);
        color: var(--clx-danger);
    }

    .alert {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
    }

    .alert svg {
        flex-shrink: 0;
    }

    .btn:hover svg {
        color: currentColor;
    }

    @@media (max-width: 768px) {
        .add-inventory-page {
            padding: var(--clx-spacing-md);
        }

        .page-header {
            flex-direction: column;
            align-items: stretch;
        }

        .page-header .btn {
            width: 100%;
        }

        .form-grid-2col {
            grid-template-columns: 1fr;
        }

        .form-actions {
            flex-direction: column;
        }
    }
</style>

@code {
    private InventoryItem _model { get; set; } = new();
    private bool _isLoading;
    private string? _error;
    private string? _success;
    private bool _accessDenied;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.IsInRole("Admin") && !user.IsInRole("Chemist"))
        {
            _accessDenied = true;
        }
    }

    private async Task HandleAdd()
    {
        _error = _success = null;
        _isLoading = true;

        try
        {
            await InventoryService.AddItemAsync(_model);
            _success = "Item added successfully!";
            await Task.Delay(800);
            Navigation.NavigateTo("/inventory");
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _isLoading = false;
        }
    }
}
