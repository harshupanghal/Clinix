@page "/inventory/stock/{ItemId:int}"
@attribute [Authorize(Roles = "Admin, Chemist")] 
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Clinix.Application.Interfaces
@using Clinix.Application.Interfaces.Functionalities
@using Clinix.Domain.Entities.Inventory
@inject IInventoryService InventoryService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime Js

<h3 class="mb-4 text-primary">Stock Management</h3>

@if (_accessDenied)
{
    <div class="alert alert-danger">Access denied. Only Admins and Chemists can update stock.</div>
}
else if (_item == null)
{
    <div class="alert alert-info">Loading item details...</div>
}
else
{
    <div class="card shadow-lg p-5 mx-auto stock-card" style="max-width:800px; border-radius:1rem;">
        <div class="mb-4">
            <h5 class="text-secondary">Item Details</h5>
            <hr />
            <div class="d-flex justify-content-between">
                <div><strong>Item:</strong> @_item.Name</div>
                <div><strong>Current Stock:</strong> @_item.CurrentStock</div>
            </div>
        </div>

        <EditForm Model="_model" OnValidSubmit="HandleStock" FormName="StockForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label fw-semibold text-primary">Transaction Type</label>
                    <InputSelect @bind-Value="_model.TransactionType" class="form-select">
                        <option value="">-- Select Type --</option>
                        <option value="IN">Stock In</option>
                        <option value="OUT">Stock Out</option>
                    </InputSelect>
                </div>

                <div class="col-md-6">
                    <label class="form-label fw-semibold text-primary">Quantity</label>
                    <InputNumber @bind-Value="_model.Quantity" class="form-control" placeholder="Enter quantity" />
                </div>

                <div class="col-12">
                    <label class="form-label fw-semibold text-primary">Description (Optional)</label>
                    <InputTextArea @bind-Value="_model.Description" class="form-control" rows="3" placeholder="Add a note or reason..." />
                </div>
            </div>

            <div class="d-flex gap-3 mt-4 flex-wrap">
                <button type="submit" class="btn btn-primary flex-fill position-relative" disabled="@_isLoading">
    @if (_isLoading)
    {
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        <span>Processing...</span>
    }
    else
    {
        <span><i class="bi bi-arrow-repeat me-1"></i> Submit</span>
    }
</button>


                <button type="button" class="btn btn-secondary flex-fill" @onclick="@(() => Navigation.NavigateTo("/inventory"))">
                    Cancel
                </button>
            </div>

            @if (!string.IsNullOrEmpty(_error))
            {
                <div class="alert alert-danger mt-3">@_error</div>
            }
            @if (!string.IsNullOrEmpty(_success))
            {
                <div class="alert alert-success mt-3">@_success</div>
            }
        </EditForm>
    </div>
}

@code {
    [Parameter] public int ItemId { get; set; }
    private InventoryItem? _item;
    [SupplyParameterFromForm]
    private StockModel _model { get; set; } = new();
    private bool _isLoading;
    private string? _error;
    private string? _success;
    private bool _accessDenied;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.IsInRole("Admin") && !user.IsInRole("Chemist"))
        {
            _accessDenied = true;
            return;
        }

        _item = await InventoryService.GetItemByIdAsync(ItemId);
        if (_item == null)
            _error = "Item not found";
    }

    private async Task HandleStock()
    {
        _error = _success = null;
        _isLoading = true;

        try
        {
            var username = (await AuthStateProvider.GetAuthenticationStateAsync()).User.Identity?.Name ?? "Unknown";

            if (_model.TransactionType == "IN")
            {
                await InventoryService.StockInAsync(ItemId, _model.Quantity, username, _model.Description);
                _success = "Stock added successfully!";
            }
            else if (_model.TransactionType == "OUT")
            {
                if (_item != null && _model.Quantity > _item.CurrentStock)
                {
                    _error = "Cannot stock out more than current stock.";
                    return;
                }
                await InventoryService.StockOutAsync(ItemId, _model.Quantity, username, _model.Description);
                _success = "Stock deducted successfully!";
            }
            else
            {
                _error = "Please select transaction type.";
                return;
            }

            await Task.Delay(800); // short delay for UX
            Navigation.NavigateTo("/inventory");
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private class StockModel
    {
        [Required(ErrorMessage = "Transaction type is required")]
        public string TransactionType { get; set; } = string.Empty;

        [Required(ErrorMessage = "Quantity is required")]
        [Range(1, int.MaxValue, ErrorMessage = "Quantity must be at least 1")]
        public int Quantity { get; set; }

        public string? Description { get; set; }
    }
}
