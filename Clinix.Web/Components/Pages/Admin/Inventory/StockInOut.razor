@page "/inventory/stock/{ItemId:int}"
@attribute [Authorize(Roles = "Admin, Chemist")] 
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using Clinix.Application.Interfaces
@using Clinix.Application.Interfaces.Functionalities
@using Clinix.Domain.Entities
@using Clinix.Domain.Entities.Inventory
@inject IInventoryService InventoryService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime Js

<h3>Stock In / Out</h3>

@if (_accessDenied)
{
    <div class="alert alert-danger">Access denied. Only Admins and Chemists can update stock.</div>
}
else if (_item == null)
{
    <div class="alert alert-info">Loading item...</div>
}
else
{
    <div class="mb-3">
        <strong>Item:</strong> @_item.Name
    </div>
    <div class="mb-3">
        <strong>Current Stock:</strong> @_item.CurrentStock
    </div>

    <EditForm Model="_model" OnValidSubmit="HandleStock" FormName="Stock-Form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Transaction Type</label>
            <InputSelect @bind-Value="_model.TransactionType" class="form-select">
                <option value="">Select Type</option>
                <option value="IN">Stock In</option>
                <option value="OUT">Stock Out</option>
            </InputSelect>
        </div>

        <div class="mb-3">
            <label>Quantity</label>
            <InputNumber @bind-Value="_model.Quantity" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Description (Optional)</label>
            <InputTextArea @bind-Value="_model.Description" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary w-100" disabled="@_isLoading">@_buttonText</button>
        <button type="button" class="btn btn-secondary w-100 mt-2" @onclick='@(() => Navigation.NavigateTo("/inventory"))'>Cancel</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(_error))
    {
        <div class="alert alert-danger mt-2">@_error</div>
    }
    @if (!string.IsNullOrEmpty(_success))
    {
        <div class="alert alert-success mt-2">@_success</div>
    }
}

@code {
    [Parameter] public int ItemId { get; set; }
    private InventoryItem? _item;
    [SupplyParameterFromForm]
    private StockModel _model { get; set; } = new();
    private bool _isLoading;
    private string _buttonText = "Submit";
    private string? _error;
    private string? _success;
    private bool _accessDenied;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.IsInRole("Admin") && !user.IsInRole("Chemist"))
        {
            _accessDenied = true;
            return;
        }

        _item = await InventoryService.GetItemByIdAsync(ItemId);
        if (_item == null)
            _error = "Item not found";
    }

    private async Task HandleStock()
    {
        _error = _success = null;
        _isLoading = true;
        _buttonText = "Processing...";

        try
        {
            if (_model.TransactionType == "IN")
            {
                await InventoryService.StockInAsync(ItemId, _model.Quantity, (await AuthStateProvider.GetAuthenticationStateAsync()).User.Identity!.Name ?? "Unknown", _model.Description);
                _success = "Stock added successfully!";
            }
            else if (_model.TransactionType == "OUT")
            {
                if (_item != null && _model.Quantity > _item.CurrentStock)
                {
                    _error = "Cannot stock out more than current stock.";
                    return;
                }
                await InventoryService.StockOutAsync(ItemId, _model.Quantity, (await AuthStateProvider.GetAuthenticationStateAsync()).User.Identity!.Name ?? "Unknown", _model.Description);
                _success = "Stock deducted successfully!";
            }
            else
            {
                _error = "Please select transaction type.";
                return;
            }

            await Task.Delay(800);
            Navigation.NavigateTo("/inventory");
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _isLoading = false;
            _buttonText = "Submit";
        }
    }

    private class StockModel
    {
        [Required]
        public string TransactionType { get; set; } = string.Empty;
        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Quantity must be at least 1")]
        public int Quantity { get; set; }
        public string? Description { get; set; }
    }
}
