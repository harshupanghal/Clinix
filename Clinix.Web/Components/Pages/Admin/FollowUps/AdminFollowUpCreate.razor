@page "/admin/followups/create"
@using Clinix.Application.Dtos.FollowUps
@using Clinix.Domain.Enums
@using MudBlazor
@inject Clinix.Application.Interfaces.Services.IFollowUpService FollowUpService
@inject NavigationManager NavigationManager
@inject ILogger<AdminFollowUpCreate> Logger

<PageTitle>Create Follow-Up</PageTitle>

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Create New Follow-Up</MudText>

    <MudForm @ref="_form">
        <MudStack Spacing="3" Class="mt-2">
            <MudSelect T="long?" Label="Select Appointment" @bind-Value="_selectedAppointmentId" Required="true">
                @foreach (var appt in _appointments)
                {
                    <MudSelectItem T="long?" Value="@appt.Id">@($"{appt.PatientName} - {appt.DoctorName} ({appt.StartAt:dd MMM yyyy HH:mm})")</MudSelectItem>
                }
            </MudSelect>

            <MudTextField T="string" Label="Illness / Summary" @bind-Value="_illnessSummary" Required="true" Lines="3" />

            <MudText Typo="Typo.h6">Follow-Up Tasks</MudText>

            @foreach (var tuple in _tasks.Select((vm, idx) => (vm, idx)))
            {
                var vm = tuple.vm;
                var idx = tuple.idx;
                <MudPaper Class="pa-3 mb-2">
                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                        <!-- strongly-typed enum select -->
                        <MudSelect T="FollowUpTaskType" @bind-Value="_tasks[idx].Type" Label="Type" Dense="true" Style="min-width:200px;">
                            <MudSelectItem T="FollowUpTaskType" Value="@FollowUpTaskType.MedicationReminder">Medication Reminder</MudSelectItem>
                            <MudSelectItem T="FollowUpTaskType" Value="@FollowUpTaskType.RevisitReminder">Revisit Reminder</MudSelectItem>
                            <MudSelectItem T="FollowUpTaskType" Value="@FollowUpTaskType.CheckIn">Check In</MudSelectItem>
                            <MudSelectItem T="FollowUpTaskType" Value="@FollowUpTaskType.CampaignStep">Campaign Step</MudSelectItem>
                            <MudSelectItem T="FollowUpTaskType" Value="@FollowUpTaskType.ManualAction">Manual Action</MudSelectItem>
                            <MudSelectItem T="FollowUpTaskType" Value="@FollowUpTaskType.AdminNotification">Admin Notification</MudSelectItem>
                        </MudSelect>

                        <MudTextField T="string" Label="Payload / Message" @bind-Value="_tasks[idx].Payload" Style="min-width:300px;" />

                        <MudDatePicker T="DateTime?" @bind-Date="_tasks[idx].Date" Label="Date" />
                        <MudTimePicker T="TimeSpan?" @bind-Time="_tasks[idx].Time" Label="Time" />

                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(()=> RemoveTask(idx))" />
                    </MudStack>
                </MudPaper>
            }

            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="AddTask">Add Task</MudButton>

            <MudStack Row="true" Spacing="2">
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SubmitAsync">Create</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
            </MudStack>
        </MudStack>
    </MudForm>
</MudPaper>

@code {
    private MudForm _form = null!;
    private List<AppointmentDto> _appointments = new();
    private long? _selectedAppointmentId;
    private string _illnessSummary = string.Empty;

    private List<CreateFollowUpTaskViewModel> _tasks = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var upcoming = await FollowUpService.GetUpcomingAppointmentsAsync(DateTimeOffset.UtcNow);
            _appointments = upcoming.Select(a => new AppointmentDto {
                Id = a.Id,
                PatientId = a.PatientId,
                DoctorId = a.DoctorId,
                PatientName = a.Patient?.User?.FullName ?? "Unknown",
                DoctorName = a.Doctor?.User?.FullName ?? "N/A",
                StartAt = a.StartAt
            }).ToList();

            _tasks.Add(new CreateFollowUpTaskViewModel());
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load appointments for follow-up create.");
        }
    }

    private void AddTask() => _tasks.Add(new CreateFollowUpTaskViewModel());

    private void RemoveTask(int index)
    {
        if (index >= 0 && index < _tasks.Count) _tasks.RemoveAt(index);
    }

    private async Task SubmitAsync()
    {
        await _form.Validate();
        if (!_form.IsValid) return;
        if (!_selectedAppointmentId.HasValue)
        {
            // UI-level guard
            return;
        }

        var appointment = _appointments.First(a => a.Id == _selectedAppointmentId.Value);

        var req = new CreateManualFollowUpRequest
        {
            AppointmentId = _selectedAppointmentId,
            PatientId = appointment.PatientId,
            DoctorId = appointment.DoctorId,
            Diagnosis = _illnessSummary,
            Tasks = _tasks.Select(t => new CreateFollowUpTaskDto
            {
                Type = t.Type,
                Payload = t.Payload,
                ScheduledAt = new DateTimeOffset((t.Date ?? DateTime.UtcNow).Date + (t.Time ?? TimeSpan.FromHours(9))),
                MaxAttempts = t.MaxAttempts
            }).ToList()
        };

        try
        {
            await FollowUpService.CreateManualFollowUpAsync(req);
            NavigationManager.NavigateTo("/admin/followups");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating follow-up");
        }
    }

    private void Cancel() => NavigationManager.NavigateTo("/admin/followups");

    private class AppointmentDto
    {
        public long Id; public long PatientId; public long DoctorId;
        public string PatientName = ""; public string DoctorName = "";
        public DateTimeOffset StartAt;
    }

    private class CreateFollowUpTaskViewModel
    {
        public FollowUpTaskType Type { get; set; } = FollowUpTaskType.MedicationReminder;
        public string Payload { get; set; } = "";
        public DateTime? Date { get; set; } = DateTime.UtcNow.Date;
        public TimeSpan? Time { get; set; } = TimeSpan.FromHours(9);
        public int MaxAttempts { get; set; } = 3;
    }
}
