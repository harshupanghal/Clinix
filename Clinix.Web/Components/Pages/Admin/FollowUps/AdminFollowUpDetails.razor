@page "/admin/followups/details/{FollowUpId:long}"
@using Clinix.Application.Dtos.FollowUps
@using Clinix.Domain.Enums
@using MudBlazor
@inject Clinix.Application.Interfaces.Services.IFollowUpService FollowUpService
@inject NavigationManager NavigationManager
@inject ILogger<AdminFollowUpDetails> Logger

<PageTitle>Follow-Up Details</PageTitle>

<MudPaper Class="pa-4">
    <MudStack Spacing="2">
        <MudText Typo="Typo.h5">Follow-Up Details</MudText>

        @if (_loading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
        }
        else if (_detail == null)
        {
            <MudAlert Severity="Severity.Error">Follow-up not found</MudAlert>
        }
        else
        {
            <MudPaper Class="pa-3 mb-3">
                <MudText Typo="Typo.subtitle1"><b>Patient:</b> @_detail.PatientName</MudText>
                <MudText Typo="Typo.subtitle1"><b>Doctor:</b> @_detail.DoctorName</MudText>
                <MudText Typo="Typo.subtitle1"><b>Appointment:</b> @_detail.AppointmentDate.ToString("dd MMM yyyy HH:mm")</MudText>
                <MudText Typo="Typo.body2"><b>Diagnosis:</b> @_detail.Diagnosis</MudText>
                <MudText Typo="Typo.body2"><b>Notes:</b> @_detail.Notes</MudText>
            </MudPaper>

            <MudText Typo="Typo.h6">Follow-Up Tasks</MudText>
            <MudTable Items="_detail.Tasks" Hover="true" Bordered="true" Striped="true" Dense="true">
                <HeaderContent>
                    <MudTh>Type</MudTh>
                    <MudTh>Scheduled At</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Description</MudTd>
                    <MudTd>@context.ScheduledAt.ToString("dd MMM yyyy HH:mm")</MudTd>
                    <MudTd>
                        <MudChip T="FollowUpTaskStatus" Color="@GetStatusColor(context.Status)" Variant="Variant.Filled">@context.Status</MudChip>
                    </MudTd>
                    <MudTd>
                        @if (context.Status == FollowUpTaskStatus.Pending)
                        {
                            <MudButton Size="Size.Small" Color="Color.Primary" OnClick="() => OpenRescheduleDialog(context)">Reschedule</MudButton>
                            <MudButton Size="Size.Small" Color="Color.Secondary" OnClick="() => PauseTaskAsync(context)">Pause</MudButton>
                            <MudButton Size="Size.Small" Color="Color.Error" OnClick="() => CancelTaskAsync(context)">Cancel</MudButton>
                        }
                        else
                        {
                            <MudText Typo="Typo.caption">No actions</MudText>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudStack>
</MudPaper>

<MudDialog @bind-IsVisible="_rescheduleDialogOpen">
    <DialogContent>
        <MudText Typo="Typo.h6">Reschedule Task</MudText>
        <MudDatePicker T="DateTime?" @bind-Date="_rescheduleDate" Label="New Date" />
        <MudTimePicker T="TimeSpan?" @bind-Time="_rescheduleTime" Label="New Time" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ConfirmReschedule" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="() => _rescheduleDialogOpen = false" Color="Color.Secondary">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public long FollowUpId { get; set; }
    private bool _loading = true;
    private FollowUpDetailDto? _detail;
    private bool _rescheduleDialogOpen;
    private FollowUpTaskDto? _taskToReschedule;
    private DateTime? _rescheduleDate;
    private TimeSpan? _rescheduleTime;

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        try
        {
            _loading = true;
            _detail = await FollowUpService.GetByIdAsync(FollowUpId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading follow-up details");
        }
        finally
        {
            _loading = false;
        }
    }

    private Color GetStatusColor(FollowUpTaskStatus status) => status switch
    {
        FollowUpTaskStatus.Pending => Color.Info,
        FollowUpTaskStatus.InProgress => Color.Primary,
        FollowUpTaskStatus.Completed => Color.Success,
        FollowUpTaskStatus.Failed => Color.Error,
        FollowUpTaskStatus.Cancelled => Color.Secondary,
        FollowUpTaskStatus.DeadLettered => Color.Dark,
        _ => Color.Default
    };

    private void OpenRescheduleDialog(FollowUpTaskDto t)
    {
        _taskToReschedule = t;
        _rescheduleDate = t.ScheduledAt.DateTime;
        _rescheduleTime = t.ScheduledAt.TimeOfDay;
        _rescheduleDialogOpen = true;
    }

    private async Task ConfirmReschedule()
    {
        if (_taskToReschedule == null || !_rescheduleDate.HasValue || !_rescheduleTime.HasValue) return;
        var newDt = new DateTimeOffset(_rescheduleDate.Value.Date + _rescheduleTime.Value);
        // TODO: replace actorUserId 0 with actual current admin user id (from auth)
        await FollowUpService.RescheduleTaskAsync(_taskToReschedule.Id, newDt, actorUserId: 0);
        _rescheduleDialogOpen = false;
        await LoadAsync();
    }

    private async Task PauseTaskAsync(FollowUpTaskDto t)
    {
        // TODO: replace actorUserId 0 with actual current admin user id (from auth)
        await FollowUpService.PauseTaskAsync(t.Id, actorUserId: 0);
        await LoadAsync();
    }

    private async Task CancelTaskAsync(FollowUpTaskDto t)
    {
        // TODO: replace actorUserId 0 with actual current admin user id (from auth)
        await FollowUpService.CancelTaskAsync(t.Id, actorUserId: 0, reason: "Cancelled by admin");
        await LoadAsync();
    }
}
