@page "/admin/followups"
@using Clinix.Application.Dtos.FollowUps
@using Clinix.Domain.Enums
@using MudBlazor
@inject Clinix.Application.Interfaces.Services.IFollowUpService FollowUpService
@inject NavigationManager NavigationManager
@* @inject ILogger<AdminFollowUps> Logger *@

<PageTitle>Admin Follow-Ups</PageTitle>

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Follow-Up Dashboard</MudText>

    <MudStack Row="true" Spacing="2" Class="mb-4">
        <MudTextField T="string" @bind-Value="_searchPatient" Label="Search Patient" Adornment="Adornment.Start" Icon="@Icons.Material.Filled.Search" />
        <MudSelect T="FollowUpTaskStatus?" @bind-Value="_statusFilter" Label="Task Status" Dense="true">
            <MudSelectItem T="FollowUpTaskStatus?" Value="@((FollowUpTaskStatus?)null)">All</MudSelectItem>
            <MudSelectItem T="FollowUpTaskStatus?" Value="@FollowUpTaskStatus.Pending">Pending</MudSelectItem>
            <MudSelectItem T="FollowUpTaskStatus?" Value="@FollowUpTaskStatus.InProgress">In Progress</MudSelectItem>
            <MudSelectItem T="FollowUpTaskStatus?" Value="@FollowUpTaskStatus.Completed">Completed</MudSelectItem>
            <MudSelectItem T="FollowUpTaskStatus?" Value="@FollowUpTaskStatus.Failed">Failed</MudSelectItem>
            <MudSelectItem T="FollowUpTaskStatus?" Value="@FollowUpTaskStatus.Cancelled">Cancelled</MudSelectItem>
            <MudSelectItem T="FollowUpTaskStatus?" Value="@FollowUpTaskStatus.DeadLettered">DeadLettered</MudSelectItem>
        </MudSelect>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadFollowUpsAsync">Apply</MudButton>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => NavigationManager.NavigateTo("/admin/followups/create"))">Create Follow-Up</MudButton>
    </MudStack>

    @if (_loading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
    }
    else
    {
        <MudTable Items="_items" Hover="true" Bordered="true" Striped="true" Dense="true">
            <HeaderContent>
                <MudTh>Patient</MudTh>
                <MudTh>Doctor</MudTh>
                <MudTh>Appointment Date</MudTh>
                <MudTh>Next Follow-Up</MudTh>
                <MudTh>Task Status</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.PatientName</MudTd>
                <MudTd>@context.DoctorName</MudTd>
                <MudTd>@context.AppointmentDate.ToString("dd MMM yyyy HH:mm")</MudTd>
                <MudTd>@(context.NextFollowUp?.ToString("dd MMM yyyy HH:mm") ?? "-")</MudTd>
                <MudTd>
                    @* Show status chip; parse string status to enum if possible *@
                    @if (Enum.TryParse<FollowUpTaskStatus>(context.Status, out var s))
                    {
                        <MudChip T="FollowUpTaskStatus" Color="@GetStatusColor(s)" Variant="Variant.Filled">@s</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Color="Color.Default" Variant="Variant.Filled">@context.Status</MudChip>
                    }
                </MudTd>
                <MudTd>
                    <MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Outlined" OnClick="() => ViewDetails(context.Id)">Details</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudPaper>

@code {
    private string _searchPatient = string.Empty;
    private FollowUpTaskStatus? _statusFilter = null;
    private bool _loading = true;
    private List<FollowUpListItemDto> _items = new();

    protected override async Task OnInitializedAsync() => await LoadFollowUpsAsync();

    private async Task LoadFollowUpsAsync()
    {
        try
        {
            _loading = true;
            var all = (await FollowUpService.GetAllForAdminAsync()).ToList();

            var filtered = all.Where(f =>
                (string.IsNullOrWhiteSpace(_searchPatient) || f.PatientName.Contains(_searchPatient, StringComparison.OrdinalIgnoreCase)) &&
                (_statusFilter == null || f.Status.Equals(_statusFilter.Value.ToString(), StringComparison.OrdinalIgnoreCase))
            );

            _items = filtered.OrderByDescending(f => f.AppointmentDate).ToList();
        }
        catch (Exception ex)
        {
            // Logger.LogError(ex, "Error loading follow-ups");
        }
        finally
        {
            _loading = false;
        }
    }

    private Color GetStatusColor(FollowUpTaskStatus status) => status switch
    {
        FollowUpTaskStatus.Pending => Color.Info,
        FollowUpTaskStatus.InProgress => Color.Primary,
        FollowUpTaskStatus.Completed => Color.Success,
        FollowUpTaskStatus.Failed => Color.Error,
        FollowUpTaskStatus.Cancelled => Color.Secondary,
        FollowUpTaskStatus.DeadLettered => Color.Dark,
        _ => Color.Default
    };

    private void ViewDetails(long id) => NavigationManager.NavigateTo($"/admin/followups/details/{id}");
}
