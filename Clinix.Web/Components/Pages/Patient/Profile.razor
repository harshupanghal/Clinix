@page "/patient/complete-profile"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Patient")]
@using Blazored.FluentValidation
@using Clinix.Application.Dtos
@using Clinix.Application.Dtos.Patient
@using Clinix.Web.Services
@inject IRegistrationUiService RegistrationUiService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthProvider
@inject Blazored.Toast.Services.IToastService ToastService

<div class="complete-profile-page">
    <!-- Page Header -->
    <div class="page-header">
        <div>
            <h1 class="page-title">
                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm.256 7a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z"/>
                    <path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0Z"/>
                </svg>
                Complete Your Profile
            </h1>
            <p class="page-subtitle">Please provide additional information to complete your patient profile</p>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                @if (isSuccess)
                {
                    <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
                }
                else
                {
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    <path d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z"/>
                }
            </svg>
            @message
            <button type="button" class="btn-close" @onclick="() => message = null"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-3 text-muted">Loading your details...</p>
        </div>
    }
    else
    {
        <EditForm Model="profileModel" OnValidSubmit="OnValidSubmit" class="complete-profile-form">
            <FluentValidationValidator />

            <!-- Personal Details Section -->
            <div class="card form-section-card">
                <div class="card-header">
                    <h5 class="section-title">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z"/>
                        </svg>
                        Personal Details
                    </h5>
                </div>
                <div class="card-body">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="dob" class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5z"/>
                                </svg>
                                Date of Birth
                            </label>
                            <InputDate id="dob" class="form-control" @bind-Value="profileModel.DateOfBirth" />
                            <ValidationMessage For="@(() => profileModel.DateOfBirth)" class="validation-message" />
                        </div>

                        <div class="form-group">
                            <label for="gender" class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 1a2 2 0 1 0 0 4 2 2 0 0 0 0-4zM3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3z"/>
                                </svg>
                                Gender
                            </label>
                            <InputSelect id="gender" class="form-select" @bind-Value="profileModel.Gender">
                                <option value="">Select Gender</option>
                                <option>Male</option>
                                <option>Female</option>
                                <option>Other</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => profileModel.Gender)" class="validation-message" />
                        </div>

                        <div class="form-group">
                            <label for="bloodGroup" class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zM8 1.918l-.797.161A4.002 4.002 0 0 0 4 6c0 .628-.134 2.197-.459 3.742-.16.767-.376 1.566-.663 2.258h10.244c-.287-.692-.502-1.49-.663-2.258C12.134 8.197 12 6.628 12 6a4.002 4.002 0 0 0-3.203-3.92L8 1.917z"/>
                                </svg>
                                Blood Group
                            </label>
                            <InputSelect id="bloodGroup" class="form-select" @bind-Value="profileModel.BloodGroup">
                                <option value="">Select Blood Group</option>
                                <option>A+</option><option>A-</option>
                                <option>B+</option><option>B-</option>
                                <option>O+</option><option>O-</option>
                                <option>AB+</option><option>AB-</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => profileModel.BloodGroup)" class="validation-message" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Emergency Contact Section -->
            <div class="card form-section-card">
                <div class="card-header">
                    <h5 class="section-title">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328z"/>
                        </svg>
                        Emergency Contact
                    </h5>
                </div>
                <div class="card-body">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="emergencyContactName" class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
                                </svg>
                                Contact Name
                            </label>
                            <InputText id="emergencyContactName" class="form-control" @bind-Value="profileModel.EmergencyContactName" placeholder="Enter contact name" />
                            <ValidationMessage For="@(() => profileModel.EmergencyContactName)" class="validation-message" />
                        </div>

                        <div class="form-group">
                            <label for="emergencyContactNumber" class="form-label">
                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328z"/>
                            </svg>
                            Contact Number
                            </label>
                            <InputText id="emergencyContactNumber" class="form-control" @bind-Value="profileModel.EmergencyContactNumber" placeholder="Enter contact number" />
                            <ValidationMessage For="@(() => profileModel.EmergencyContactNumber)" class="validation-message" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Medical Information Section -->
            <div class="card form-section-card">
                <div class="card-header">
                    <h5 class="section-title">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                        </svg>
                        Medical Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="knownAllergies" class="form-label">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                            </svg>
                            Known Allergies
                        </label>
                        <InputTextArea id="knownAllergies" class="form-control textarea-control" @bind-Value="profileModel.KnownAllergies" rows="3" placeholder="List any known allergies (e.g., penicillin, peanuts)" />
                        <ValidationMessage For="@(() => profileModel.KnownAllergies)" class="validation-message" />
                    </div>

                    <div class="form-group">
                        <label for="existingConditions" class="form-label">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
                                <path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z"/>
                            </svg>
                            Existing Medical Conditions
                        </label>
                        <InputTextArea id="existingConditions" class="form-control textarea-control" @bind-Value="profileModel.ExistingConditions" rows="3" placeholder="List any existing medical conditions (e.g., diabetes, hypertension)" />
                        <ValidationMessage For="@(() => profileModel.ExistingConditions)" class="validation-message" />
                    </div>
                </div>
            </div>

            <!-- Submit Button -->
            <button type="submit" class="btn btn-primary btn-lg submit-button" disabled="@isSubmitting">
                @if (isSubmitting)
                {
                    <span class="button-content">
                        <span class="spinner-border spinner-border-sm" role="status"></span>
                        <span>Saving Profile...</span>
                    </span>
                }
                else
                {
                    <span class="button-content">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425a.247.247 0 0 1 .02-.022Z"/>
                        </svg>
                        <span>Complete Profile</span>
                    </span>
                }
            </button>
        </EditForm>
    }
</div>

<style>
    /* ============================================
       COMPLETE PROFILE PAGE
       ============================================ */
    .complete-profile-page {
        padding: var(--clx-spacing-lg);
        max-width: 900px;
        margin: 0 auto;
    }

    /* ============================================
       PAGE HEADER
       ============================================ */
    .page-header {
        margin-bottom: var(--clx-spacing-xl);
    }

    .page-title {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
        margin: 0 0 var(--clx-spacing-xs) 0;
        color: var(--clx-gray-900);
        font-size: 1.75rem;
    }

    .page-title svg {
        color: var(--clx-primary);
    }

    .page-subtitle {
        color: var(--clx-gray-600);
        font-size: 0.875rem;
        margin: 0;
    }

    /* ============================================
       ALERTS
       ============================================ */
    .alert {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
        margin-bottom: var(--clx-spacing-lg);
    }

    .alert svg {
        flex-shrink: 0;
    }

    .alert-dismissible .btn-close {
        margin-left: auto;
    }

    /* ============================================
       LOADING STATE
       ============================================ */
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--clx-spacing-2xl);
        text-align: center;
    }

    /* ============================================
       FORM SECTIONS
       ============================================ */
    .complete-profile-form {
        display: flex;
        flex-direction: column;
        gap: var(--clx-spacing-lg);
    }

    .form-section-card {
        box-shadow: var(--clx-shadow-md);
    }

    .form-section-card .card-header {
        background-color: var(--clx-gray-50);
        border-bottom: 2px solid var(--clx-gray-200);
        padding: var(--clx-spacing-lg);
    }

    .section-title {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
        margin: 0;
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--clx-gray-900);
    }

    .section-title svg {
        color: var(--clx-primary);
    }

    /* ============================================
       FORM GRID
       ============================================ */
    .form-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: var(--clx-spacing-lg);
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: var(--clx-spacing-sm);
    }

    .form-label {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-xs);
        font-weight: 600;
        font-size: 0.875rem;
        color: var(--clx-gray-700);
    }

    .form-label svg {
        color: var(--clx-primary);
    }

    .form-control,
    .form-select {
        padding: var(--clx-spacing-md);
        font-size: 0.9375rem;
        border: 2px solid var(--clx-gray-300);
        border-radius: var(--clx-radius-md);
        transition: all var(--clx-transition-normal);
    }

    .form-control:focus,
    .form-select:focus {
        border-color: var(--clx-primary);
        outline: none;
        box-shadow: 0 0 0 3px rgba(var(--clx-primary-rgb), 0.1);
    }

    .textarea-control {
        resize: vertical;
        min-height: 80px;
    }

    .validation-message {
        color: var(--clx-danger);
        font-size: 0.8125rem;
        margin-top: var(--clx-spacing-xs);
    }

    /* ============================================
       SUBMIT BUTTON
       ============================================ */
    .submit-button {
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: var(--clx-spacing-sm);
        height: 52px;
        font-weight: 600;
        margin-top: var(--clx-spacing-lg);
    }

    .submit-button:not(:disabled):hover {
        transform: translateY(-2px);
        box-shadow: var(--clx-shadow-lg);
    }

    .submit-button:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .button-content {
        display: flex;
        align-items: center;
        gap: var(--clx-spacing-sm);
    }

    /* ============================================
       RESPONSIVE DESIGN
       ============================================ */
    @@media (max-width: 768px) {
        .complete-profile-page {
            padding: var(--clx-spacing-md);
        }

        .form-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    private CompletePatientProfileRequest profileModel = new();
    private bool isSubmitting;
    private bool isLoading = true;
    private string? message;
    private bool isSuccess;
    private CancellationTokenSource? cts;

    protected override async Task OnInitializedAsync()
    {
        cts = new CancellationTokenSource();
        isLoading = true;

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            var idClaim = user.FindFirst("UserId") ?? user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);
            if (idClaim != null && long.TryParse(idClaim.Value, out var id))
                profileModel.UserId = id;
        }

        isLoading = false;
    }

    private async Task OnValidSubmit()
    {
        if (isSubmitting) return;
        isSubmitting = true;

        try
        {
            var result = await RegistrationUiService.CompletePatientProfileAsync(profileModel);
            if (result.IsSuccess)
            {
                isSuccess = true;
                message = "Profile updated successfully. Redirecting to dashboard...";
                ToastService.ShowSuccess(message);

                try
                {
                    await Task.Delay(1200, cts!.Token);
                }
                catch (TaskCanceledException) { }

                if (!(cts?.IsCancellationRequested ?? true))
                    NavigationManager.NavigateTo("/patient/dashboard", forceLoad: true);
            }
            else
            {
                isSuccess = false;
                message = $"Error: {result.Error}";
                ToastService.ShowError(message);
            }
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public void Dispose()
    {
        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
            cts = null;
        }
    }
}
