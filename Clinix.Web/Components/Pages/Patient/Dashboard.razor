@page "/patient/dashboard"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Patient")]
@using Clinix.Application.Dtos
@using Clinix.Application.Dtos.Patient
@using Clinix.Web.Services
@inject IPatientDashboardUiService DashboardUiService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager
@inject Blazored.Toast.Services.IToastService ToastService

<h3 class="mb-4 text-primary">My Dashboard</h3>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status" aria-hidden="true"></div>
        <p class="mt-3">Loading your dashboard...</p>
    </div>
}
else if (dashboard == null)
{
    <div class="alert alert-warning" role="alert">
        Could not load dashboard. If this continues, contact support.
    </div>
}
else
{
    <div class="row g-3">
        <div class="col-12 col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <div class="avatar bg-secondary rounded-circle d-flex align-items-center justify-content-center" style="width:64px;height:64px;font-size:1.2rem;">
                                @dashboard.FullName?.Split(' ').Select(s => s.FirstOrDefault()).Take(2).Aggregate("", (a,b) => a + (b==null?"":b.ToString()))
                            </div>
                        </div>
                        <div class="flex-grow-1">
                            <h5 class="card-title mb-0">@dashboard.FullName</h5>
                            <small class="text-muted">Patient ID: @dashboard.UserId</small>
                            <div class="mt-2">
                                <span class="me-3"><strong>Phone:</strong> @dashboard.Phone</span>
                                <span class="me-3"><strong>Email:</strong> @dashboard.Email</span>
                            </div>
                        </div>
                        <div>
                            <button class="btn btn-outline-primary" @onclick="GoEdit">Edit Profile</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-body">
                    <h6>Profile Summary</h6>
                    <dl class="row mb-0">
                        <dt class="col-sm-4">DOB</dt>
                        <dd class="col-sm-8">@((dashboard.DateOfBirth?.ToString("yyyy-MM-dd")) ?? "Not provided")</dd>

                        <dt class="col-sm-4">Gender</dt>
                        <dd class="col-sm-8">@(dashboard.Gender ?? "Not provided")</dd>

                        <dt class="col-sm-4">Blood Group</dt>
                        <dd class="col-sm-8">@(dashboard.BloodGroup ?? "Not provided")</dd>

                        <dt class="col-sm-4">Emergency Contact</dt>
                        <dd class="col-sm-8">@((dashboard.EmergencyContactName != null ? $"{dashboard.EmergencyContactName} ({dashboard.EmergencyContactNumber})" : "Not provided"))</dd>

                        <dt class="col-sm-4">Known Allergies</dt>
                        <dd class="col-sm-8">@(dashboard.KnownAllergies ?? "None")</dd>

                        <dt class="col-sm-4">Existing Conditions</dt>
                        <dd class="col-sm-8">@(dashboard.ExistingConditions ?? "None")</dd>

                        <dt class="col-sm-4">Profile Completed</dt>
                        <dd class="col-sm-8">@((dashboard.IsProfileCompleted) ? "Yes" : "No")</dd>
                    </dl>
                </div>
            </div>
        </div>

        <div class="col-12 col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h6>Quick Actions</h6>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="GoEdit">Edit Profile</button>
                        <button class="btn btn-outline-secondary" disabled>View Appointments (coming)</button>
                        <button class="btn btn-outline-secondary" disabled>View Follow-ups (coming)</button>
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-body">
                    <h6>Activity</h6>
                    <p class="mb-0">No recent activity to show. Appointment and follow-up modules will appear here once enabled.</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private PatientDashboardDto? dashboard;
    private bool isLoading = true;
    private CancellationTokenSource? cts;

    protected override async Task OnInitializedAsync()
    {
        cts = new CancellationTokenSource();
        isLoading = true;

        try
        {
            var auth = await AuthProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            if (!(user.Identity?.IsAuthenticated ?? false))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            var idClaim = user.FindFirst("UserId") ?? user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);
            if (idClaim == null || !long.TryParse(idClaim.Value, out var userId))
            {
                ToastService.ShowError("Unable to identify your account. Please login again.");
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            dashboard = await DashboardUiService.GetDashboardAsync(userId, cts.Token);
        }
        catch (OperationCanceledException) { /* ignore */ }
        catch (Exception ex)
        {
            // log? the UI service logs internally; we only show user-friendly message
            ToastService.ShowError("Failed to load dashboard. Please try again later.");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoEdit()
    {
        NavigationManager.NavigateTo("/patient/edit-profile");
    }

    public void Dispose()
    {
        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
            cts = null;
        }
    }
}
