@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@inject IJSRuntime JS
@inject Application.Interfaces.Functionalities.IAuthenticationService _authService
@inject Blazored.Toast.Services.IToastService ToastService

<div class="d-flex justify-content-center align-items-center min-vh-100 bg-light">
    <div class="card shadow-lg p-4 p-md-5" style="max-width: 400px; width: 100%;">
        <!-- App Logo / Name -->
        <div class="text-center mb-4">
            <h2 class="text-primary fw-bold">Clinix</h2>
            <p class="text-muted mb-0">Welcome back! Please login to continue.</p>
        </div>

        <EditForm Model="_model" OnValidSubmit="HandleLogin" class="needs-validation" FormName="Login-Form">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <!-- Phone -->
            <div class="form-floating mb-3">
                <InputText id="phone" class="form-control" placeholder="Phone" @bind-Value="_model.Phone" />
                <label for="phone">Phone Number</label>
            </div>

            <!-- Password -->
            <div class="form-floating mb-3 position-relative">
                <InputText id="password" type="@(_showPassword ? "text" : "password")" class="form-control" placeholder="Password" @bind-Value="_model.Password" />
                <label for="password">Password</label>
                <button type="button" class="btn btn-sm btn-outline-secondary position-absolute top-50 end-0 translate-middle-y me-2"
                        @onclick="() => _showPassword = !_showPassword">
                    @(_showPassword ? "Hide" : "Show")
                </button>
            </div>

            <!-- Remember Me -->
            <div class="form-check mb-4">
                <InputCheckbox id="remember" class="form-check-input" @bind-Value="_model.RememberMe" />
                <label class="form-check-label" for="remember">Remember Me</label>
            </div>

            <!-- Submit Button -->
            <button type="submit" class="btn btn-primary w-100 py-2" disabled="@_isLoading">
                @_isLoading ? "Logging in..." : "Login"
                @if (_isLoading)
                {
                    <span class="spinner-border spinner-border-sm ms-2" role="status"></span>
                }
            </button>

            <!-- Register Link -->
            <div class="text-center mt-3">
                <small class="text-muted">
                    Don't have an account? 
                    <a href="/register" class="text-decoration-none">Register here</a>
                </small>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginModel _model { get; set; } = new();

    private bool _isLoading;
    private bool _showPassword;

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    private async Task HandleLogin()
    {
        _isLoading = true;

        try
        {
            var result = await _authService.ValidateCredentialsAsync(_model.Phone, _model.Password);

            if (!result.IsSuccess)
            {
                ToastService.ShowError(result.Error ?? "Invalid credentials");
                return;
            }

            var user = new BlazorAuthNoIdentity.LoggedInUserModel(
                result.UserId ?? 0,
                result.Fullname ?? string.Empty,
                result.Email ?? string.Empty,
                result.Phone ?? string.Empty,
                result.Role ?? string.Empty
            );

            var claims = user.ToClaims();
            const string AuthScheme = "clx-auth";

            var identity = new ClaimsIdentity(claims, AuthScheme);
            var principal = new ClaimsPrincipal(identity);

            var props = new AuthenticationProperties
            {
                IsPersistent = _model.RememberMe,
                ExpiresUtc = DateTimeOffset.UtcNow.AddHours(_model.RememberMe ? 72 : 8)
            };

            await HttpContext.SignInAsync(AuthScheme, principal, props);

            ToastService.ShowSuccess("Login successful! Redirecting...");
            Logger.LogInformation("Login successful for {User}", _model.Phone);

            await Task.Delay(1000);
            Navigation.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during login for {User}", _model.Phone);
            ToastService.ShowError("Unexpected error occurred. Try again.");
        }
        finally
        {
            _isLoading = false;
        }
    }
}
