@page "/doctor/schedule"
@rendermode InteractiveServer  
@attribute [Authorize(Roles = "Doctor")]
@using Clinix.Application.Dtos.Appointment
@using Clinix.Application.Interfaces.Functionalities
@using Clinix.Application.Interfaces.UserRepo
@using Clinix.Application.UseCases
@using Clinix.Domain.Entities.Appointments
@using Clinix.Domain.Enums
@using Clinix.Web.Helpers
@inject IAppointmentRepository AppointmentRepository
@inject IPatientRepository PatientRepository
@inject ApproveRejectAppointmentUseCase ApproveRejectAppointmentUseCase
@inject DelayCascadeUseCase DelayCascadeUseCase
@inject AuthenticationStateProvider AuthStateProvider
@inject Blazored.Toast.Services.IToastService ToastService

<h3 class="mb-3">My Schedule</h3>

<div class="card p-3 shadow-sm">
    @if (Appointments == null || !Appointments.Any())
    {
        <div class="text-muted">No upcoming appointments.</div>
    }
    else
    {
        <table class="table table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th>Date & Time</th>
                    <th>Patient</th>
                    <th>Status</th>
                    <th style="width:270px">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var a in Appointments)
                {
                    <tr>
                        <td>@a.StartAt.ToString("yyyy-MM-dd HH:mm")</td>
                       <td>@(a.Patient?.User?.FullName ?? $"Patient #{a.PatientId}")</td>

                        <td>
                            <span class="badge @(a.Status == AppointmentStatus.Pending ? "bg-warning text-dark" :
                                                a.Status == AppointmentStatus.Approved ? "bg-success" :
                                                a.Status == AppointmentStatus.Rejected ? "bg-danger" :
                                                "bg-secondary")">
                                @a.Status
                            </span>
                        </td>
                        <td>
                            @if (a.Status == AppointmentStatus.Pending)
                            {
                                <button class="btn btn-success btn-sm me-1" @onclick="() => ApproveAsync(a.Id)">Approve</button>
                                <button class="btn btn-danger btn-sm me-1" @onclick="() => RejectAsync(a.Id)">Reject</button>
                            }
                            <button class="btn btn-outline-warning btn-sm" @onclick="() => OpenDelayModal(a.Id)">Delay</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<DelayModal @ref="_delayModal"  />

@code {
    private List<Appointment> Appointments = new();
    private Dictionary<long, string> PatientNames = new();
    private long DoctorId;
    private DelayModal? _delayModal;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;

        var doctorIdClaim = user.FindFirst("UserId") ?? user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);
        if (doctorIdClaim == null || !long.TryParse(doctorIdClaim.Value, out DoctorId))
        {
            ToastService.ShowError("Unable to identify logged-in doctor. Please re-login.");
            return;
        }

        await LoadAppointmentsAsync();
    }

   private async Task LoadAppointmentsAsync()
{
    Appointments = (await AppointmentRepository.GetUpcomingAppointmentsForDoctorAsync(
        DoctorId, DateTimeOffset.UtcNow)).ToList();

    PatientNames.Clear();

}


    private async Task ApproveAsync(long appointmentId)
    {
        try
        {
            await ApproveRejectAppointmentUseCase.ApproveAsync(appointmentId, DoctorId.ToString());
            ToastService.ShowSuccess("Appointment approved.");
            await LoadAppointmentsAsync();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Approval failed: {ex.Message}");
        }
    }

    private async Task RejectAsync(long appointmentId)
    {
        try
        {
            await ApproveRejectAppointmentUseCase.RejectAsync(appointmentId, DoctorId.ToString(), "Rejected by doctor");
            ToastService.ShowSuccess("Appointment rejected.");
            await LoadAppointmentsAsync();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Rejection failed: {ex.Message}");
        }
    }

    private void OpenDelayModal(long appointmentId) => _delayModal?.Show(appointmentId);

    private async Task HandleConfirmedDelay((long AppointmentId, int Minutes) payload)
    {
        try
        {
            var req = new DelayAppointmentRequest(DoctorId, payload.AppointmentId, TimeSpan.FromMinutes(payload.Minutes), DoctorId);
            await DelayCascadeUseCase.DelayCascadeAsync(req);
            ToastService.ShowSuccess("Appointments delayed successfully.");
            await LoadAppointmentsAsync();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Delay failed: {ex.Message}");
        }
    }
}
