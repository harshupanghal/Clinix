@* @page "/doctor-calendar"
@using Clinix.Application.Interfaces.Functionalities
@using Clinix.Domain.Entities.Appointments
@using Clinix.Domain.Enums
@inject IAppointmentRepository AppointmentRepository
@inject NavigationManager Navigation

<h3>Doctor Calendar</h3>
<div class="card p-4 shadow-sm">
    <table class="table table-hover">
        <thead>
            <tr><th>Time</th><th>Patient</th><th>Status</th><th>Actions</th></tr>
        </thead>
        <tbody>
            @foreach(var dayGroup in AppointmentsGrouped)
            {
                <tr class="table-secondary"><td colspan="4">@dayGroup.Key: @dayGroup.Key:dddd, MMM dd</td></tr>
                @foreach(var a in dayGroup)
                {
                    <tr>
                        <td>@a.StartAt:HH:mm - @a.EndAt:HH:mm</td>
                        <td>@a.PatientId</td>
                        <td>@a.Status</td>
                        <td>
                            @if(a.Status == AppointmentStatus.Pending)
                            {
                                <button class="btn btn-success btn-sm me-1" @onclick="()=>Approve(a.Id)">Approve</button>
                                <button class="btn btn-danger btn-sm" @onclick="()=>Reject(a.Id)">Reject</button>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<Appointment> Appointments = new();
    private ILookup<DateTime, Appointment> AppointmentsGrouped => Appointments.ToLookup(a => a.StartAt.Date);

    protected override async Task OnInitializedAsync()
    {
        var doctorId = Guid.NewGuid(); // Replace with logged-in doctor ID
        Appointments = await AppointmentRepository.GetUpcomingAppointmentsForDoctorAsync(doctorId);
    }

    private async Task Approve(Guid id)
    {
        // integrate approve use-case
        await Task.CompletedTask;
    }

    private async Task Reject(Guid id)
    {
        // integrate reject use-case
        await Task.CompletedTask;
    }
}
 *@
